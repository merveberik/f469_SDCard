
f469ni_ledblink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a4  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003558  08003558  00013558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003630  08003630  00013630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08003638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000540  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00006000  20000550  20000550  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013fda  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002b87  00000000  00000000  0003401a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00009766  00000000  00000000  00036ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  00040308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00040cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005b04  00000000  00000000  00041af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000378d  00000000  00000000  000475f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ad81  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001b8c  00000000  00000000  0004ae00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b4 <__do_global_dtors_aux>:
 80001b4:	b510      	push	{r4, lr}
 80001b6:	4c05      	ldr	r4, [pc, #20]	; (80001cc <__do_global_dtors_aux+0x18>)
 80001b8:	7823      	ldrb	r3, [r4, #0]
 80001ba:	b933      	cbnz	r3, 80001ca <__do_global_dtors_aux+0x16>
 80001bc:	4b04      	ldr	r3, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x1c>)
 80001be:	b113      	cbz	r3, 80001c6 <__do_global_dtors_aux+0x12>
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <__do_global_dtors_aux+0x20>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	2301      	movs	r3, #1
 80001c8:	7023      	strb	r3, [r4, #0]
 80001ca:	bd10      	pop	{r4, pc}
 80001cc:	20000010 	.word	0x20000010
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08003540 	.word	0x08003540

080001d8 <frame_dummy>:
 80001d8:	b508      	push	{r3, lr}
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <frame_dummy+0x10>)
 80001dc:	b11b      	cbz	r3, 80001e6 <frame_dummy+0xe>
 80001de:	4903      	ldr	r1, [pc, #12]	; (80001ec <frame_dummy+0x14>)
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <frame_dummy+0x18>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	bd08      	pop	{r3, pc}
 80001e8:	00000000 	.word	0x00000000
 80001ec:	20000014 	.word	0x20000014
 80001f0:	08003540 	.word	0x08003540

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b97a 	b.w	8000500 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	468c      	mov	ip, r1
 800022a:	460d      	mov	r5, r1
 800022c:	4604      	mov	r4, r0
 800022e:	9e08      	ldr	r6, [sp, #32]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d151      	bne.n	80002d8 <__udivmoddi4+0xb4>
 8000234:	428a      	cmp	r2, r1
 8000236:	4617      	mov	r7, r2
 8000238:	d96d      	bls.n	8000316 <__udivmoddi4+0xf2>
 800023a:	fab2 fe82 	clz	lr, r2
 800023e:	f1be 0f00 	cmp.w	lr, #0
 8000242:	d00b      	beq.n	800025c <__udivmoddi4+0x38>
 8000244:	f1ce 0c20 	rsb	ip, lr, #32
 8000248:	fa01 f50e 	lsl.w	r5, r1, lr
 800024c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000250:	fa02 f70e 	lsl.w	r7, r2, lr
 8000254:	ea4c 0c05 	orr.w	ip, ip, r5
 8000258:	fa00 f40e 	lsl.w	r4, r0, lr
 800025c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000260:	0c25      	lsrs	r5, r4, #16
 8000262:	fbbc f8fa 	udiv	r8, ip, sl
 8000266:	fa1f f987 	uxth.w	r9, r7
 800026a:	fb0a cc18 	mls	ip, sl, r8, ip
 800026e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000272:	fb08 f309 	mul.w	r3, r8, r9
 8000276:	42ab      	cmp	r3, r5
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x6c>
 800027a:	19ed      	adds	r5, r5, r7
 800027c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000280:	f080 8123 	bcs.w	80004ca <__udivmoddi4+0x2a6>
 8000284:	42ab      	cmp	r3, r5
 8000286:	f240 8120 	bls.w	80004ca <__udivmoddi4+0x2a6>
 800028a:	f1a8 0802 	sub.w	r8, r8, #2
 800028e:	443d      	add	r5, r7
 8000290:	1aed      	subs	r5, r5, r3
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb5 f0fa 	udiv	r0, r5, sl
 8000298:	fb0a 5510 	mls	r5, sl, r0, r5
 800029c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a0:	fb00 f909 	mul.w	r9, r0, r9
 80002a4:	45a1      	cmp	r9, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x98>
 80002a8:	19e4      	adds	r4, r4, r7
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ae:	f080 810a 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80002b2:	45a1      	cmp	r9, r4
 80002b4:	f240 8107 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	eba4 0409 	sub.w	r4, r4, r9
 80002c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c4:	2100      	movs	r1, #0
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d061      	beq.n	800038e <__udivmoddi4+0x16a>
 80002ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ce:	2300      	movs	r3, #0
 80002d0:	6034      	str	r4, [r6, #0]
 80002d2:	6073      	str	r3, [r6, #4]
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xc8>
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d054      	beq.n	800038a <__udivmoddi4+0x166>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	f040 808e 	bne.w	8000412 <__udivmoddi4+0x1ee>
 80002f6:	42ab      	cmp	r3, r5
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xdc>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2d0>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb65 0503 	sbc.w	r5, r5, r3
 8000306:	2001      	movs	r0, #1
 8000308:	46ac      	mov	ip, r5
 800030a:	2e00      	cmp	r6, #0
 800030c:	d03f      	beq.n	800038e <__udivmoddi4+0x16a>
 800030e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	b912      	cbnz	r2, 800031e <__udivmoddi4+0xfa>
 8000318:	2701      	movs	r7, #1
 800031a:	fbb7 f7f2 	udiv	r7, r7, r2
 800031e:	fab7 fe87 	clz	lr, r7
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d134      	bne.n	8000392 <__udivmoddi4+0x16e>
 8000328:	1beb      	subs	r3, r5, r7
 800032a:	0c3a      	lsrs	r2, r7, #16
 800032c:	fa1f fc87 	uxth.w	ip, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb3 f8f2 	udiv	r8, r3, r2
 8000336:	0c25      	lsrs	r5, r4, #16
 8000338:	fb02 3318 	mls	r3, r2, r8, r3
 800033c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000340:	fb0c f308 	mul.w	r3, ip, r8
 8000344:	42ab      	cmp	r3, r5
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x134>
 8000348:	19ed      	adds	r5, r5, r7
 800034a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x132>
 8000350:	42ab      	cmp	r3, r5
 8000352:	f200 80d1 	bhi.w	80004f8 <__udivmoddi4+0x2d4>
 8000356:	4680      	mov	r8, r0
 8000358:	1aed      	subs	r5, r5, r3
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000360:	fb02 5510 	mls	r5, r2, r0, r5
 8000364:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000368:	fb0c fc00 	mul.w	ip, ip, r0
 800036c:	45a4      	cmp	ip, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x15c>
 8000370:	19e4      	adds	r4, r4, r7
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x15a>
 8000378:	45a4      	cmp	ip, r4
 800037a:	f200 80b8 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000388:	e79d      	b.n	80002c6 <__udivmoddi4+0xa2>
 800038a:	4631      	mov	r1, r6
 800038c:	4630      	mov	r0, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	f1ce 0420 	rsb	r4, lr, #32
 8000396:	fa05 f30e 	lsl.w	r3, r5, lr
 800039a:	fa07 f70e 	lsl.w	r7, r7, lr
 800039e:	fa20 f804 	lsr.w	r8, r0, r4
 80003a2:	0c3a      	lsrs	r2, r7, #16
 80003a4:	fa25 f404 	lsr.w	r4, r5, r4
 80003a8:	ea48 0803 	orr.w	r8, r8, r3
 80003ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80003b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b4:	fb02 4411 	mls	r4, r2, r1, r4
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003c0:	fb01 f30c 	mul.w	r3, r1, ip
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1bc>
 80003cc:	19ed      	adds	r5, r5, r7
 80003ce:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003d2:	f080 808a 	bcs.w	80004ea <__udivmoddi4+0x2c6>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	f240 8087 	bls.w	80004ea <__udivmoddi4+0x2c6>
 80003dc:	3902      	subs	r1, #2
 80003de:	443d      	add	r5, r7
 80003e0:	1aeb      	subs	r3, r5, r3
 80003e2:	fa1f f588 	uxth.w	r5, r8
 80003e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ea:	fb02 3310 	mls	r3, r2, r0, r3
 80003ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003f2:	fb00 f30c 	mul.w	r3, r0, ip
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1e6>
 80003fa:	19ed      	adds	r5, r5, r7
 80003fc:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000400:	d26f      	bcs.n	80004e2 <__udivmoddi4+0x2be>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d96d      	bls.n	80004e2 <__udivmoddi4+0x2be>
 8000406:	3802      	subs	r0, #2
 8000408:	443d      	add	r5, r7
 800040a:	1aeb      	subs	r3, r5, r3
 800040c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000410:	e78f      	b.n	8000332 <__udivmoddi4+0x10e>
 8000412:	f1c1 0720 	rsb	r7, r1, #32
 8000416:	fa22 f807 	lsr.w	r8, r2, r7
 800041a:	408b      	lsls	r3, r1
 800041c:	fa05 f401 	lsl.w	r4, r5, r1
 8000420:	ea48 0303 	orr.w	r3, r8, r3
 8000424:	fa20 fe07 	lsr.w	lr, r0, r7
 8000428:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800042c:	40fd      	lsrs	r5, r7
 800042e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000432:	fbb5 f9fc 	udiv	r9, r5, ip
 8000436:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800043a:	fb0c 5519 	mls	r5, ip, r9, r5
 800043e:	fa1f f883 	uxth.w	r8, r3
 8000442:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000446:	fb09 f408 	mul.w	r4, r9, r8
 800044a:	42ac      	cmp	r4, r5
 800044c:	fa02 f201 	lsl.w	r2, r2, r1
 8000450:	fa00 fa01 	lsl.w	sl, r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x244>
 8000456:	18ed      	adds	r5, r5, r3
 8000458:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800045c:	d243      	bcs.n	80004e6 <__udivmoddi4+0x2c2>
 800045e:	42ac      	cmp	r4, r5
 8000460:	d941      	bls.n	80004e6 <__udivmoddi4+0x2c2>
 8000462:	f1a9 0902 	sub.w	r9, r9, #2
 8000466:	441d      	add	r5, r3
 8000468:	1b2d      	subs	r5, r5, r4
 800046a:	fa1f fe8e 	uxth.w	lr, lr
 800046e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000472:	fb0c 5510 	mls	r5, ip, r0, r5
 8000476:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800047a:	fb00 f808 	mul.w	r8, r0, r8
 800047e:	45a0      	cmp	r8, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x26e>
 8000482:	18e4      	adds	r4, r4, r3
 8000484:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000488:	d229      	bcs.n	80004de <__udivmoddi4+0x2ba>
 800048a:	45a0      	cmp	r8, r4
 800048c:	d927      	bls.n	80004de <__udivmoddi4+0x2ba>
 800048e:	3802      	subs	r0, #2
 8000490:	441c      	add	r4, r3
 8000492:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000496:	eba4 0408 	sub.w	r4, r4, r8
 800049a:	fba0 8902 	umull	r8, r9, r0, r2
 800049e:	454c      	cmp	r4, r9
 80004a0:	46c6      	mov	lr, r8
 80004a2:	464d      	mov	r5, r9
 80004a4:	d315      	bcc.n	80004d2 <__udivmoddi4+0x2ae>
 80004a6:	d012      	beq.n	80004ce <__udivmoddi4+0x2aa>
 80004a8:	b156      	cbz	r6, 80004c0 <__udivmoddi4+0x29c>
 80004aa:	ebba 030e 	subs.w	r3, sl, lr
 80004ae:	eb64 0405 	sbc.w	r4, r4, r5
 80004b2:	fa04 f707 	lsl.w	r7, r4, r7
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431f      	orrs	r7, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	6037      	str	r7, [r6, #0]
 80004be:	6074      	str	r4, [r6, #4]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	4618      	mov	r0, r3
 80004c8:	e6f8      	b.n	80002bc <__udivmoddi4+0x98>
 80004ca:	4690      	mov	r8, r2
 80004cc:	e6e0      	b.n	8000290 <__udivmoddi4+0x6c>
 80004ce:	45c2      	cmp	sl, r8
 80004d0:	d2ea      	bcs.n	80004a8 <__udivmoddi4+0x284>
 80004d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d6:	eb69 0503 	sbc.w	r5, r9, r3
 80004da:	3801      	subs	r0, #1
 80004dc:	e7e4      	b.n	80004a8 <__udivmoddi4+0x284>
 80004de:	4628      	mov	r0, r5
 80004e0:	e7d7      	b.n	8000492 <__udivmoddi4+0x26e>
 80004e2:	4640      	mov	r0, r8
 80004e4:	e791      	b.n	800040a <__udivmoddi4+0x1e6>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e7be      	b.n	8000468 <__udivmoddi4+0x244>
 80004ea:	4601      	mov	r1, r0
 80004ec:	e778      	b.n	80003e0 <__udivmoddi4+0x1bc>
 80004ee:	3802      	subs	r0, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	e745      	b.n	8000380 <__udivmoddi4+0x15c>
 80004f4:	4608      	mov	r0, r1
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xe6>
 80004f8:	f1a8 0802 	sub.w	r8, r8, #2
 80004fc:	443d      	add	r5, r7
 80004fe:	e72b      	b.n	8000358 <__udivmoddi4+0x134>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000504:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_InitTick+0x3c>)
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_InitTick+0x40>)
{
 800050a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800050c:	7818      	ldrb	r0, [r3, #0]
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f0 	udiv	r3, r3, r0
 8000516:	6810      	ldr	r0, [r2, #0]
 8000518:	fbb0 f0f3 	udiv	r0, r0, r3
 800051c:	f000 f89c 	bl	8000658 <HAL_SYSTICK_Config>
 8000520:	4604      	mov	r4, r0
 8000522:	b958      	cbnz	r0, 800053c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000524:	2d0f      	cmp	r5, #15
 8000526:	d809      	bhi.n	800053c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	4602      	mov	r2, r0
 800052a:	4629      	mov	r1, r5
 800052c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000530:	f000 f85e 	bl	80005f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_InitTick+0x44>)
 8000536:	4620      	mov	r0, r4
 8000538:	601d      	str	r5, [r3, #0]
 800053a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800053c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800053e:	bd38      	pop	{r3, r4, r5, pc}
 8000540:	2000000c 	.word	0x2000000c
 8000544:	20000000 	.word	0x20000000
 8000548:	20000004 	.word	0x20000004

0800054c <HAL_Init>:
{
 800054c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_Init+0x30>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000566:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f82f 	bl	80005cc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff ffc8 	bl	8000504 <HAL_InitTick>
  HAL_MspInit();
 8000574:	f002 ff5a 	bl	800342c <HAL_MspInit>
}
 8000578:	2000      	movs	r0, #0
 800057a:	bd08      	pop	{r3, pc}
 800057c:	40023c00 	.word	0x40023c00

08000580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x10>)
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_IncTick+0x14>)
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	440b      	add	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000060 	.word	0x20000060
 8000594:	20000000 	.word	0x20000000

08000598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <HAL_GetTick+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000060 	.word	0x20000060

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
 80005a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff fff6 	bl	8000598 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ac:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf1c      	itt	ne
 80005b0:	4b05      	ldrne	r3, [pc, #20]	; (80005c8 <HAL_Delay+0x24>)
 80005b2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005b6:	bf18      	it	ne
 80005b8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ba:	f7ff ffed 	bl	8000598 <HAL_GetTick>
 80005be:	1b40      	subs	r0, r0, r5
 80005c0:	4284      	cmp	r4, r0
 80005c2:	d8fa      	bhi.n	80005ba <HAL_Delay+0x16>
  {
  }
}
 80005c4:	bd38      	pop	{r3, r4, r5, pc}
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000

080005cc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005ce:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	0c1b      	lsrs	r3, r3, #16
 80005d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	0200      	lsls	r0, r0, #8
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005e6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e8:	60d3      	str	r3, [r2, #12]
 80005ea:	4770      	bx	lr
 80005ec:	e000ed00 	.word	0xe000ed00

080005f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	68dc      	ldr	r4, [r3, #12]
 80005f6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000600:	2b04      	cmp	r3, #4
 8000602:	bf28      	it	cs
 8000604:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000606:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000608:	f04f 0501 	mov.w	r5, #1
 800060c:	fa05 f303 	lsl.w	r3, r5, r3
 8000610:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000614:	bf8c      	ite	hi
 8000616:	3c03      	subhi	r4, #3
 8000618:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061a:	4019      	ands	r1, r3
 800061c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800061e:	fa05 f404 	lsl.w	r4, r5, r4
 8000622:	3c01      	subs	r4, #1
 8000624:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000626:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	ea42 0201 	orr.w	r2, r2, r1
 800062c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	bfad      	iteet	ge
 8000632:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	f000 000f 	andlt.w	r0, r0, #15
 800063a:	4b06      	ldrlt	r3, [pc, #24]	; (8000654 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	bfb5      	itete	lt
 8000642:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	e000ed14 	.word	0xe000ed14

08000658 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000658:	3801      	subs	r0, #1
 800065a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800065e:	d20a      	bcs.n	8000676 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000662:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000670:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000676:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e010 	.word	0xe000e010
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000688:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800068a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000854 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000690:	4a6e      	ldr	r2, [pc, #440]	; (800084c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000692:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8000858 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000696:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000698:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800069a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800069e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006a2:	42ac      	cmp	r4, r5
 80006a4:	f040 80b8 	bne.w	8000818 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006a8:	684c      	ldr	r4, [r1, #4]
 80006aa:	f024 0c10 	bic.w	ip, r4, #16
 80006ae:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 80006b2:	2e01      	cmp	r6, #1
 80006b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006b8:	d812      	bhi.n	80006e0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006bc:	2603      	movs	r6, #3
 80006be:	fa06 f60e 	lsl.w	r6, r6, lr
 80006c2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006c6:	68ce      	ldr	r6, [r1, #12]
 80006c8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006cc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006ce:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006d0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006d2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006d6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006da:	409e      	lsls	r6, r3
 80006dc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006de:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e8:	43f6      	mvns	r6, r6
 80006ea:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006ee:	688f      	ldr	r7, [r1, #8]
 80006f0:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006f8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80006fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fe:	d116      	bne.n	800072e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000700:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000704:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000708:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800070c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000710:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000714:	f04f 0c0f 	mov.w	ip, #15
 8000718:	fa0c fc0b 	lsl.w	ip, ip, fp
 800071c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000720:	690f      	ldr	r7, [r1, #16]
 8000722:	fa07 f70b 	lsl.w	r7, r7, fp
 8000726:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800072a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800072e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000730:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000732:	f004 0703 	and.w	r7, r4, #3
 8000736:	fa07 fe0e 	lsl.w	lr, r7, lr
 800073a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800073e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000740:	00e6      	lsls	r6, r4, #3
 8000742:	d569      	bpl.n	8000818 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	f04f 0b00 	mov.w	fp, #0
 8000748:	f8cd b00c 	str.w	fp, [sp, #12]
 800074c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000750:	4e3f      	ldr	r6, [pc, #252]	; (8000850 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000756:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800075a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800075e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000762:	9703      	str	r7, [sp, #12]
 8000764:	9f03      	ldr	r7, [sp, #12]
 8000766:	f023 0703 	bic.w	r7, r3, #3
 800076a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800076e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000772:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000776:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800077a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800077e:	f04f 0e0f 	mov.w	lr, #15
 8000782:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000786:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000788:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078c:	d04b      	beq.n	8000826 <HAL_GPIO_Init+0x1a2>
 800078e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000792:	42b0      	cmp	r0, r6
 8000794:	d049      	beq.n	800082a <HAL_GPIO_Init+0x1a6>
 8000796:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800079a:	42b0      	cmp	r0, r6
 800079c:	d047      	beq.n	800082e <HAL_GPIO_Init+0x1aa>
 800079e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a2:	42b0      	cmp	r0, r6
 80007a4:	d045      	beq.n	8000832 <HAL_GPIO_Init+0x1ae>
 80007a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007aa:	42b0      	cmp	r0, r6
 80007ac:	d043      	beq.n	8000836 <HAL_GPIO_Init+0x1b2>
 80007ae:	4548      	cmp	r0, r9
 80007b0:	d043      	beq.n	800083a <HAL_GPIO_Init+0x1b6>
 80007b2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d041      	beq.n	800083e <HAL_GPIO_Init+0x1ba>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d03f      	beq.n	8000842 <HAL_GPIO_Init+0x1be>
 80007c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007c6:	42b0      	cmp	r0, r6
 80007c8:	d03d      	beq.n	8000846 <HAL_GPIO_Init+0x1c2>
 80007ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ce:	42b0      	cmp	r0, r6
 80007d0:	bf14      	ite	ne
 80007d2:	260a      	movne	r6, #10
 80007d4:	2609      	moveq	r6, #9
 80007d6:	fa06 f60c 	lsl.w	r6, r6, ip
 80007da:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007de:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007e0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007e2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007e8:	bf0c      	ite	eq
 80007ea:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007ec:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80007ee:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80007f0:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007f2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80007f6:	bf0c      	ite	eq
 80007f8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80007fa:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80007fc:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007fe:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000800:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000804:	bf0c      	ite	eq
 8000806:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000808:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800080a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800080c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf54      	ite	pl
 8000812:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000814:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000816:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000818:	3301      	adds	r3, #1
 800081a:	2b10      	cmp	r3, #16
 800081c:	f47f af3d 	bne.w	800069a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000820:	b005      	add	sp, #20
 8000822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000826:	465e      	mov	r6, fp
 8000828:	e7d5      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 800082a:	2601      	movs	r6, #1
 800082c:	e7d3      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 800082e:	2602      	movs	r6, #2
 8000830:	e7d1      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 8000832:	2603      	movs	r6, #3
 8000834:	e7cf      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 8000836:	2604      	movs	r6, #4
 8000838:	e7cd      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 800083a:	2605      	movs	r6, #5
 800083c:	e7cb      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 800083e:	2606      	movs	r6, #6
 8000840:	e7c9      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 8000842:	2607      	movs	r6, #7
 8000844:	e7c7      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 8000846:	2608      	movs	r6, #8
 8000848:	e7c5      	b.n	80007d6 <HAL_GPIO_Init+0x152>
 800084a:	bf00      	nop
 800084c:	40013c00 	.word	0x40013c00
 8000850:	40020000 	.word	0x40020000
 8000854:	40023800 	.word	0x40023800
 8000858:	40021400 	.word	0x40021400

0800085c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800085c:	b10a      	cbz	r2, 8000862 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800085e:	6181      	str	r1, [r0, #24]
 8000860:	4770      	bx	lr
 8000862:	0409      	lsls	r1, r1, #16
 8000864:	e7fb      	b.n	800085e <HAL_GPIO_WritePin+0x2>

08000866 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000866:	6943      	ldr	r3, [r0, #20]
 8000868:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800086c:	bf08      	it	eq
 800086e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000870:	6181      	str	r1, [r0, #24]
 8000872:	4770      	bx	lr

08000874 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000874:	4913      	ldr	r1, [pc, #76]	; (80008c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000876:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000878:	688b      	ldr	r3, [r1, #8]
 800087a:	f003 030c 	and.w	r3, r3, #12
 800087e:	2b04      	cmp	r3, #4
 8000880:	d003      	beq.n	800088a <HAL_RCC_GetSysClockFreq+0x16>
 8000882:	2b08      	cmp	r3, #8
 8000884:	d003      	beq.n	800088e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000888:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800088a:	4810      	ldr	r0, [pc, #64]	; (80008cc <HAL_RCC_GetSysClockFreq+0x58>)
 800088c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800088e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000890:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000892:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000894:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000898:	bf14      	ite	ne
 800089a:	480c      	ldrne	r0, [pc, #48]	; (80008cc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800089c:	480a      	ldreq	r0, [pc, #40]	; (80008c8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800089e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80008a2:	bf18      	it	ne
 80008a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80008a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80008aa:	fba1 0100 	umull	r0, r1, r1, r0
 80008ae:	f7ff fca1 	bl	80001f4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80008ba:	3301      	adds	r3, #1
 80008bc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80008be:	fbb0 f0f3 	udiv	r0, r0, r3
 80008c2:	bd08      	pop	{r3, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	00f42400 	.word	0x00f42400
 80008cc:	007a1200 	.word	0x007a1200

080008d0 <HAL_RCC_ClockConfig>:
{
 80008d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80008d6:	4604      	mov	r4, r0
 80008d8:	b910      	cbnz	r0, 80008e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80008da:	2001      	movs	r0, #1
 80008dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80008e0:	4b44      	ldr	r3, [pc, #272]	; (80009f4 <HAL_RCC_ClockConfig+0x124>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	f002 020f 	and.w	r2, r2, #15
 80008e8:	428a      	cmp	r2, r1
 80008ea:	d329      	bcc.n	8000940 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008ec:	6821      	ldr	r1, [r4, #0]
 80008ee:	078f      	lsls	r7, r1, #30
 80008f0:	d42e      	bmi.n	8000950 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008f2:	07c8      	lsls	r0, r1, #31
 80008f4:	d441      	bmi.n	800097a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80008f6:	4b3f      	ldr	r3, [pc, #252]	; (80009f4 <HAL_RCC_ClockConfig+0x124>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	f002 020f 	and.w	r2, r2, #15
 80008fe:	4295      	cmp	r5, r2
 8000900:	d367      	bcc.n	80009d2 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000902:	6822      	ldr	r2, [r4, #0]
 8000904:	0751      	lsls	r1, r2, #29
 8000906:	d46d      	bmi.n	80009e4 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000908:	0713      	lsls	r3, r2, #28
 800090a:	d507      	bpl.n	800091c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800090c:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 800090e:	6921      	ldr	r1, [r4, #16]
 8000910:	6893      	ldr	r3, [r2, #8]
 8000912:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000916:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800091a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800091c:	f7ff ffaa 	bl	8000874 <HAL_RCC_GetSysClockFreq>
 8000920:	4b35      	ldr	r3, [pc, #212]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <HAL_RCC_ClockConfig+0x12c>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800092a:	5cd3      	ldrb	r3, [r2, r3]
 800092c:	40d8      	lsrs	r0, r3
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <HAL_RCC_ClockConfig+0x130>)
 8000930:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <HAL_RCC_ClockConfig+0x134>)
 8000934:	6818      	ldr	r0, [r3, #0]
 8000936:	f7ff fde5 	bl	8000504 <HAL_InitTick>
  return HAL_OK;
 800093a:	2000      	movs	r0, #0
 800093c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000940:	b2ca      	uxtb	r2, r1
 8000942:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	4299      	cmp	r1, r3
 800094c:	d1c5      	bne.n	80008da <HAL_RCC_ClockConfig+0xa>
 800094e:	e7cd      	b.n	80008ec <HAL_RCC_ClockConfig+0x1c>
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000952:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000956:	bf1e      	ittt	ne
 8000958:	689a      	ldrne	r2, [r3, #8]
 800095a:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800095e:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000960:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000962:	bf42      	ittt	mi
 8000964:	689a      	ldrmi	r2, [r3, #8]
 8000966:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800096a:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800096c:	689a      	ldr	r2, [r3, #8]
 800096e:	68a0      	ldr	r0, [r4, #8]
 8000970:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000974:	4302      	orrs	r2, r0
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	e7bb      	b.n	80008f2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097a:	6862      	ldr	r2, [r4, #4]
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 800097e:	2a01      	cmp	r2, #1
 8000980:	d11d      	bne.n	80009be <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000988:	d0a7      	beq.n	80008da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800098a:	4e1b      	ldr	r6, [pc, #108]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 800098c:	68b3      	ldr	r3, [r6, #8]
 800098e:	f023 0303 	bic.w	r3, r3, #3
 8000992:	4313      	orrs	r3, r2
 8000994:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000996:	f7ff fdff 	bl	8000598 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800099a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800099e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009a0:	68b3      	ldr	r3, [r6, #8]
 80009a2:	6862      	ldr	r2, [r4, #4]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009ac:	d0a3      	beq.n	80008f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ae:	f7ff fdf3 	bl	8000598 <HAL_GetTick>
 80009b2:	1bc0      	subs	r0, r0, r7
 80009b4:	4540      	cmp	r0, r8
 80009b6:	d9f3      	bls.n	80009a0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80009b8:	2003      	movs	r0, #3
}
 80009ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009be:	1e91      	subs	r1, r2, #2
 80009c0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009c4:	d802      	bhi.n	80009cc <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009ca:	e7dd      	b.n	8000988 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009cc:	f013 0f02 	tst.w	r3, #2
 80009d0:	e7da      	b.n	8000988 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d2:	b2ea      	uxtb	r2, r5
 80009d4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 030f 	and.w	r3, r3, #15
 80009dc:	429d      	cmp	r5, r3
 80009de:	f47f af7c 	bne.w	80008da <HAL_RCC_ClockConfig+0xa>
 80009e2:	e78e      	b.n	8000902 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009e4:	4904      	ldr	r1, [pc, #16]	; (80009f8 <HAL_RCC_ClockConfig+0x128>)
 80009e6:	68e0      	ldr	r0, [r4, #12]
 80009e8:	688b      	ldr	r3, [r1, #8]
 80009ea:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80009ee:	4303      	orrs	r3, r0
 80009f0:	608b      	str	r3, [r1, #8]
 80009f2:	e789      	b.n	8000908 <HAL_RCC_ClockConfig+0x38>
 80009f4:	40023c00 	.word	0x40023c00
 80009f8:	40023800 	.word	0x40023800
 80009fc:	08003618 	.word	0x08003618
 8000a00:	2000000c 	.word	0x2000000c
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000a0a:	6802      	ldr	r2, [r0, #0]
{
 8000a0c:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8000a0e:	0610      	lsls	r0, r2, #24
 8000a10:	d508      	bpl.n	8000a24 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8000a12:	49a8      	ldr	r1, [pc, #672]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000a14:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000a16:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8000a1a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000a1e:	4303      	orrs	r3, r0
 8000a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8000a24:	05d1      	lsls	r1, r2, #23
 8000a26:	d508      	bpl.n	8000a3a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8000a28:	49a2      	ldr	r1, [pc, #648]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000a2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a2c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8000a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a34:	4303      	orrs	r3, r0
 8000a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000a3a:	f012 0f43 	tst.w	r2, #67	; 0x43
 8000a3e:	d172      	bne.n	8000b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f013 0f0c 	tst.w	r3, #12
 8000a46:	f000 80bf 	beq.w	8000bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8000a4a:	4d9b      	ldr	r5, [pc, #620]	; (8000cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000a4c:	4e99      	ldr	r6, [pc, #612]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLSAI_DISABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000a52:	f7ff fda1 	bl	8000598 <HAL_GetTick>
 8000a56:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8000a58:	6833      	ldr	r3, [r6, #0]
 8000a5a:	009a      	lsls	r2, r3, #2
 8000a5c:	f100 80f9 	bmi.w	8000c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8000a60:	6822      	ldr	r2, [r4, #0]
 8000a62:	0753      	lsls	r3, r2, #29
 8000a64:	d51a      	bpl.n	8000a9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000a66:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8000a6a:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8000a6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a72:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6921      	ldr	r1, [r4, #16]
 8000a7a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000a7e:	69a1      	ldr	r1, [r4, #24]
 8000a80:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000a84:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8000a88:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8000a8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000a8e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8000a92:	3901      	subs	r1, #1
 8000a94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000a98:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8000a9c:	0717      	lsls	r7, r2, #28
 8000a9e:	d519      	bpl.n	8000ad4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8000aa0:	4984      	ldr	r1, [pc, #528]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000aa2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000aa6:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8000aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aae:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	6920      	ldr	r0, [r4, #16]
 8000ab6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8000aba:	69e0      	ldr	r0, [r4, #28]
 8000abc:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8000ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8000ac4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8000ac8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000aca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8000ad4:	0616      	lsls	r6, r2, #24
 8000ad6:	d517      	bpl.n	8000b08 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8000ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ade:	d113      	bne.n	8000b08 <HAL_RCCEx_PeriphCLKConfig+0x100>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8000ae0:	4974      	ldr	r1, [pc, #464]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000ae2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8000ae6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8000aea:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000aee:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000af2:	4313      	orrs	r3, r2
 8000af4:	6922      	ldr	r2, [r4, #16]
 8000af6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000afa:	6962      	ldr	r2, [r4, #20]
 8000afc:	0852      	lsrs	r2, r2, #1
 8000afe:	3a01      	subs	r2, #1
 8000b00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8000b08:	2301      	movs	r3, #1
 8000b0a:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8000b0c:	f7ff fd44 	bl	8000598 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000b10:	4d68      	ldr	r5, [pc, #416]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 8000b12:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	0098      	lsls	r0, r3, #2
 8000b18:	d458      	bmi.n	8000bcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000b1a:	f7ff fd3d 	bl	8000598 <HAL_GetTick>
 8000b1e:	1b80      	subs	r0, r0, r6
 8000b20:	2802      	cmp	r0, #2
 8000b22:	d9f7      	bls.n	8000b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8000b24:	e04d      	b.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_PLLI2S_DISABLE();
 8000b26:	4d65      	ldr	r5, [pc, #404]	; (8000cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b28:	4e62      	ldr	r6, [pc, #392]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b2e:	f7ff fd33 	bl	8000598 <HAL_GetTick>
 8000b32:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000b34:	6833      	ldr	r3, [r6, #0]
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	d43e      	bmi.n	8000bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8000b3a:	6821      	ldr	r1, [r4, #0]
 8000b3c:	07c8      	lsls	r0, r1, #31
 8000b3e:	d506      	bpl.n	8000b4e <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8000b40:	68a3      	ldr	r3, [r4, #8]
 8000b42:	6862      	ldr	r2, [r4, #4]
 8000b44:	071b      	lsls	r3, r3, #28
 8000b46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8000b4e:	078a      	lsls	r2, r1, #30
 8000b50:	d515      	bpl.n	8000b7e <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000b52:	4a58      	ldr	r2, [pc, #352]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8000b54:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8000b56:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8000b5a:	6866      	ldr	r6, [r4, #4]
 8000b5c:	061b      	lsls	r3, r3, #24
 8000b5e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8000b62:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8000b66:	4303      	orrs	r3, r0
 8000b68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8000b6c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8000b70:	6a23      	ldr	r3, [r4, #32]
 8000b72:	f020 001f 	bic.w	r0, r0, #31
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4303      	orrs	r3, r0
 8000b7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8000b7e:	064b      	lsls	r3, r1, #25
 8000b80:	d50a      	bpl.n	8000b98 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8000b82:	68e3      	ldr	r3, [r4, #12]
 8000b84:	6862      	ldr	r2, [r4, #4]
 8000b86:	061b      	lsls	r3, r3, #24
 8000b88:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b8c:	68a2      	ldr	r2, [r4, #8]
 8000b8e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000b92:	4a48      	ldr	r2, [pc, #288]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000b94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000b98:	2301      	movs	r3, #1
 8000b9a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000b9c:	f7ff fcfc 	bl	8000598 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000ba0:	4d44      	ldr	r5, [pc, #272]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    tickstart = HAL_GetTick();
 8000ba2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	011f      	lsls	r7, r3, #4
 8000ba8:	f53f af4a 	bmi.w	8000a40 <HAL_RCCEx_PeriphCLKConfig+0x38>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000bac:	f7ff fcf4 	bl	8000598 <HAL_GetTick>
 8000bb0:	1b80      	subs	r0, r0, r6
 8000bb2:	2802      	cmp	r0, #2
 8000bb4:	d9f6      	bls.n	8000ba4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8000bb6:	e004      	b.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000bb8:	f7ff fcee 	bl	8000598 <HAL_GetTick>
 8000bbc:	1bc0      	subs	r0, r0, r7
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9b8      	bls.n	8000b34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8000bc2:	2003      	movs	r0, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8000bc8:	0618      	lsls	r0, r3, #24
 8000bca:	d43d      	bmi.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	0699      	lsls	r1, r3, #26
 8000bd0:	d530      	bpl.n	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
    PWR->CR |= PWR_CR_DBP;
 8000bd8:	4d39      	ldr	r5, [pc, #228]	; (8000cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000bec:	682b      	ldr	r3, [r5, #0]
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000bf4:	f7ff fcd0 	bl	8000598 <HAL_GetTick>
 8000bf8:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	05d9      	lsls	r1, r3, #23
 8000bfe:	d52f      	bpl.n	8000c60 <HAL_RCCEx_PeriphCLKConfig+0x258>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c00:	4d2c      	ldr	r5, [pc, #176]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000c02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c08:	d130      	bne.n	8000c6c <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000c0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c0c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000c10:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000c14:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8000c16:	d148      	bne.n	8000caa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8000c18:	6891      	ldr	r1, [r2, #8]
 8000c1a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8000c1e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000c22:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8000c26:	4301      	orrs	r1, r0
 8000c28:	6091      	str	r1, [r2, #8]
 8000c2a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000c34:	6820      	ldr	r0, [r4, #0]
 8000c36:	f010 0010 	ands.w	r0, r0, #16
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000c3a:	bf1f      	itttt	ne
 8000c3c:	4b21      	ldrne	r3, [pc, #132]	; (8000cc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8000c3e:	f894 2030 	ldrbne.w	r2, [r4, #48]	; 0x30
 8000c42:	601a      	strne	r2, [r3, #0]
  return HAL_OK;
 8000c44:	2000      	movne	r0, #0
 8000c46:	e7bd      	b.n	8000bc4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8000c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000c4e:	d1bd      	bne.n	8000bcc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8000c50:	e6fb      	b.n	8000a4a <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8000c52:	f7ff fca1 	bl	8000598 <HAL_GetTick>
 8000c56:	1bc0      	subs	r0, r0, r7
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	f67f aefd 	bls.w	8000a58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8000c5e:	e7b0      	b.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c60:	f7ff fc9a 	bl	8000598 <HAL_GetTick>
 8000c64:	1b80      	subs	r0, r0, r6
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9c7      	bls.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8000c6a:	e7aa      	b.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c6e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d0c9      	beq.n	8000c0a <HAL_RCCEx_PeriphCLKConfig+0x202>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c76:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c82:	2100      	movs	r1, #0
 8000c84:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8000c86:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000c88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c8a:	07da      	lsls	r2, r3, #31
 8000c8c:	d5bd      	bpl.n	8000c0a <HAL_RCCEx_PeriphCLKConfig+0x202>
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fc83 	bl	8000598 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c92:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c96:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c9a:	079b      	lsls	r3, r3, #30
 8000c9c:	d4b5      	bmi.n	8000c0a <HAL_RCCEx_PeriphCLKConfig+0x202>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c9e:	f7ff fc7b 	bl	8000598 <HAL_GetTick>
 8000ca2:	1b80      	subs	r0, r0, r6
 8000ca4:	42b8      	cmp	r0, r7
 8000ca6:	d9f7      	bls.n	8000c98 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8000ca8:	e78b      	b.n	8000bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000caa:	6891      	ldr	r1, [r2, #8]
 8000cac:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8000cb0:	e7ba      	b.n	8000c28 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	42470070 	.word	0x42470070
 8000cbc:	42470068 	.word	0x42470068
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	424711e0 	.word	0x424711e0
 8000cc8:	42470e40 	.word	0x42470e40

08000ccc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ccc:	6803      	ldr	r3, [r0, #0]
{
 8000cce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd2:	07dd      	lsls	r5, r3, #31
{
 8000cd4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cd6:	d410      	bmi.n	8000cfa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	0798      	lsls	r0, r3, #30
 8000cdc:	d45b      	bmi.n	8000d96 <HAL_RCC_OscConfig+0xca>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	071a      	lsls	r2, r3, #28
 8000ce2:	f100 809d 	bmi.w	8000e20 <HAL_RCC_OscConfig+0x154>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	075b      	lsls	r3, r3, #29
 8000cea:	f100 80bb 	bmi.w	8000e64 <HAL_RCC_OscConfig+0x198>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cee:	69a2      	ldr	r2, [r4, #24]
 8000cf0:	2a00      	cmp	r2, #0
 8000cf2:	f040 811c 	bne.w	8000f2e <HAL_RCC_OscConfig+0x262>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0x5a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000cfa:	4ba7      	ldr	r3, [pc, #668]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	f002 020c 	and.w	r2, r2, #12
 8000d02:	2a04      	cmp	r2, #4
 8000d04:	d007      	beq.n	8000d16 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d0c:	2a08      	cmp	r2, #8
 8000d0e:	d10d      	bne.n	8000d2c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	0259      	lsls	r1, r3, #9
 8000d14:	d50a      	bpl.n	8000d2c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4ba0      	ldr	r3, [pc, #640]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	039a      	lsls	r2, r3, #14
 8000d1c:	d5dc      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0xc>
 8000d1e:	6863      	ldr	r3, [r4, #4]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1d9      	bne.n	8000cd8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
}
 8000d26:	b002      	add	sp, #8
 8000d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2c:	6863      	ldr	r3, [r4, #4]
 8000d2e:	4d9a      	ldr	r5, [pc, #616]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d111      	bne.n	8000d5a <HAL_RCC_OscConfig+0x8e>
 8000d36:	682b      	ldr	r3, [r5, #0]
 8000d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fc2b 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d42:	4d95      	ldr	r5, [pc, #596]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000d44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	682b      	ldr	r3, [r5, #0]
 8000d48:	039b      	lsls	r3, r3, #14
 8000d4a:	d4c5      	bmi.n	8000cd8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fc24 	bl	8000598 <HAL_GetTick>
 8000d50:	1b80      	subs	r0, r0, r6
 8000d52:	2864      	cmp	r0, #100	; 0x64
 8000d54:	d9f7      	bls.n	8000d46 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000d56:	2003      	movs	r0, #3
 8000d58:	e7e5      	b.n	8000d26 <HAL_RCC_OscConfig+0x5a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d5e:	d104      	bne.n	8000d6a <HAL_RCC_OscConfig+0x9e>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	e7e5      	b.n	8000d36 <HAL_RCC_OscConfig+0x6a>
 8000d6a:	682a      	ldr	r2, [r5, #0]
 8000d6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d70:	602a      	str	r2, [r5, #0]
 8000d72:	682a      	ldr	r2, [r5, #0]
 8000d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d78:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1df      	bne.n	8000d3e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc0b 	bl	8000598 <HAL_GetTick>
 8000d82:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	039f      	lsls	r7, r3, #14
 8000d88:	d5a6      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d8a:	f7ff fc05 	bl	8000598 <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	2864      	cmp	r0, #100	; 0x64
 8000d92:	d9f7      	bls.n	8000d84 <HAL_RCC_OscConfig+0xb8>
 8000d94:	e7df      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d96:	4b80      	ldr	r3, [pc, #512]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	f012 0f0c 	tst.w	r2, #12
 8000d9e:	d007      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000da6:	2a08      	cmp	r2, #8
 8000da8:	d111      	bne.n	8000dce <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	025e      	lsls	r6, r3, #9
 8000dae:	d40e      	bmi.n	8000dce <HAL_RCC_OscConfig+0x102>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db0:	4b79      	ldr	r3, [pc, #484]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	0795      	lsls	r5, r2, #30
 8000db6:	d502      	bpl.n	8000dbe <HAL_RCC_OscConfig+0xf2>
 8000db8:	68e2      	ldr	r2, [r4, #12]
 8000dba:	2a01      	cmp	r2, #1
 8000dbc:	d1b2      	bne.n	8000d24 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	6921      	ldr	r1, [r4, #16]
 8000dc2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dc6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000dca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dcc:	e787      	b.n	8000cde <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dce:	68e2      	ldr	r2, [r4, #12]
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x2d0>)
 8000dd2:	b1b2      	cbz	r2, 8000e02 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fbde 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	4d6e      	ldr	r5, [pc, #440]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000dde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	0798      	lsls	r0, r3, #30
 8000de4:	d507      	bpl.n	8000df6 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de6:	682b      	ldr	r3, [r5, #0]
 8000de8:	6922      	ldr	r2, [r4, #16]
 8000dea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000df2:	602b      	str	r3, [r5, #0]
 8000df4:	e773      	b.n	8000cde <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df6:	f7ff fbcf 	bl	8000598 <HAL_GetTick>
 8000dfa:	1b80      	subs	r0, r0, r6
 8000dfc:	2802      	cmp	r0, #2
 8000dfe:	d9ef      	bls.n	8000de0 <HAL_RCC_OscConfig+0x114>
 8000e00:	e7a9      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000e02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e04:	f7ff fbc8 	bl	8000598 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e08:	4d63      	ldr	r5, [pc, #396]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000e0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	0799      	lsls	r1, r3, #30
 8000e10:	f57f af65 	bpl.w	8000cde <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbc0 	bl	8000598 <HAL_GetTick>
 8000e18:	1b80      	subs	r0, r0, r6
 8000e1a:	2802      	cmp	r0, #2
 8000e1c:	d9f6      	bls.n	8000e0c <HAL_RCC_OscConfig+0x140>
 8000e1e:	e79a      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e20:	6962      	ldr	r2, [r4, #20]
 8000e22:	4b5f      	ldr	r3, [pc, #380]	; (8000fa0 <HAL_RCC_OscConfig+0x2d4>)
 8000e24:	b17a      	cbz	r2, 8000e46 <HAL_RCC_OscConfig+0x17a>
      __HAL_RCC_LSI_ENABLE();
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fbb5 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e2e:	4d5a      	ldr	r5, [pc, #360]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e30:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e34:	079f      	lsls	r7, r3, #30
 8000e36:	f53f af56 	bmi.w	8000ce6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fbad 	bl	8000598 <HAL_GetTick>
 8000e3e:	1b80      	subs	r0, r0, r6
 8000e40:	2802      	cmp	r0, #2
 8000e42:	d9f6      	bls.n	8000e32 <HAL_RCC_OscConfig+0x166>
 8000e44:	e787      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000e46:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e48:	f7ff fba6 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	4d52      	ldr	r5, [pc, #328]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000e4e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e52:	0798      	lsls	r0, r3, #30
 8000e54:	f57f af47 	bpl.w	8000ce6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e58:	f7ff fb9e 	bl	8000598 <HAL_GetTick>
 8000e5c:	1b80      	subs	r0, r0, r6
 8000e5e:	2802      	cmp	r0, #2
 8000e60:	d9f6      	bls.n	8000e50 <HAL_RCC_OscConfig+0x184>
 8000e62:	e778      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e68:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e6c:	d128      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	9201      	str	r2, [sp, #4]
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e82:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	4d47      	ldr	r5, [pc, #284]	; (8000fa4 <HAL_RCC_OscConfig+0x2d8>)
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	05d9      	lsls	r1, r3, #23
 8000e8a:	d51b      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	68a3      	ldr	r3, [r4, #8]
 8000e8e:	4d42      	ldr	r5, [pc, #264]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d127      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x218>
 8000e94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e9c:	f7ff fb7c 	bl	8000598 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	4d3d      	ldr	r5, [pc, #244]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000ea2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eaa:	079b      	lsls	r3, r3, #30
 8000eac:	d539      	bpl.n	8000f22 <HAL_RCC_OscConfig+0x256>
    if(pwrclkchanged == SET)
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f43f af1d 	beq.w	8000cee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb4:	4a38      	ldr	r2, [pc, #224]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000eb6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	e716      	b.n	8000cee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	e7df      	b.n	8000e84 <HAL_RCC_OscConfig+0x1b8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fb64 	bl	8000598 <HAL_GetTick>
 8000ed0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed2:	682b      	ldr	r3, [r5, #0]
 8000ed4:	05da      	lsls	r2, r3, #23
 8000ed6:	d4d9      	bmi.n	8000e8c <HAL_RCC_OscConfig+0x1c0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed8:	f7ff fb5e 	bl	8000598 <HAL_GetTick>
 8000edc:	1bc0      	subs	r0, r0, r7
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d9f7      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x206>
 8000ee2:	e738      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d104      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x226>
 8000ee8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	672b      	str	r3, [r5, #112]	; 0x70
 8000ef0:	e7d0      	b.n	8000e94 <HAL_RCC_OscConfig+0x1c8>
 8000ef2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ef4:	f022 0201 	bic.w	r2, r2, #1
 8000ef8:	672a      	str	r2, [r5, #112]	; 0x70
 8000efa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000efc:	f022 0204 	bic.w	r2, r2, #4
 8000f00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1ca      	bne.n	8000e9c <HAL_RCC_OscConfig+0x1d0>
      tickstart = HAL_GetTick();
 8000f06:	f7ff fb47 	bl	8000598 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f0a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000f0e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000f12:	0798      	lsls	r0, r3, #30
 8000f14:	d5cb      	bpl.n	8000eae <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fb3f 	bl	8000598 <HAL_GetTick>
 8000f1a:	1bc0      	subs	r0, r0, r7
 8000f1c:	4540      	cmp	r0, r8
 8000f1e:	d9f7      	bls.n	8000f10 <HAL_RCC_OscConfig+0x244>
 8000f20:	e719      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fb39 	bl	8000598 <HAL_GetTick>
 8000f26:	1bc0      	subs	r0, r0, r7
 8000f28:	4540      	cmp	r0, r8
 8000f2a:	d9bd      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1dc>
 8000f2c:	e713      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f2e:	4d1a      	ldr	r5, [pc, #104]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
 8000f30:	68ab      	ldr	r3, [r5, #8]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	f43f aef4 	beq.w	8000d24 <HAL_RCC_OscConfig+0x58>
 8000f3c:	4e1a      	ldr	r6, [pc, #104]	; (8000fa8 <HAL_RCC_OscConfig+0x2dc>)
 8000f3e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f40:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000f42:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f44:	d138      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb27 	bl	8000598 <HAL_GetTick>
 8000f4a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4c:	682b      	ldr	r3, [r5, #0]
 8000f4e:	0199      	lsls	r1, r3, #6
 8000f50:	d42c      	bmi.n	8000fac <HAL_RCC_OscConfig+0x2e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f52:	6a22      	ldr	r2, [r4, #32]
 8000f54:	69e3      	ldr	r3, [r4, #28]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000f6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f6e:	0852      	lsrs	r2, r2, #1
 8000f70:	3a01      	subs	r2, #1
 8000f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f78:	2301      	movs	r3, #1
 8000f7a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fb0c 	bl	8000598 <HAL_GetTick>
 8000f80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	019a      	lsls	r2, r3, #6
 8000f86:	f53f aeb6 	bmi.w	8000cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8a:	f7ff fb05 	bl	8000598 <HAL_GetTick>
 8000f8e:	1b40      	subs	r0, r0, r5
 8000f90:	2802      	cmp	r0, #2
 8000f92:	d9f6      	bls.n	8000f82 <HAL_RCC_OscConfig+0x2b6>
 8000f94:	e6df      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	42470000 	.word	0x42470000
 8000fa0:	42470e80 	.word	0x42470e80
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fac:	f7ff faf4 	bl	8000598 <HAL_GetTick>
 8000fb0:	1bc0      	subs	r0, r0, r7
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d9ca      	bls.n	8000f4c <HAL_RCC_OscConfig+0x280>
 8000fb6:	e6ce      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000fb8:	f7ff faee 	bl	8000598 <HAL_GetTick>
 8000fbc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fbe:	682b      	ldr	r3, [r5, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	f57f ae98 	bpl.w	8000cf6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fae7 	bl	8000598 <HAL_GetTick>
 8000fca:	1b00      	subs	r0, r0, r4
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d9f6      	bls.n	8000fbe <HAL_RCC_OscConfig+0x2f2>
 8000fd0:	e6c1      	b.n	8000d56 <HAL_RCC_OscConfig+0x8a>
 8000fd2:	bf00      	nop

08000fd4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8000fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	4604      	mov	r4, r0
 8000fdc:	460d      	mov	r5, r1
 8000fde:	4616      	mov	r6, r2
 8000fe0:	4699      	mov	r9, r3
 8000fe2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8000fe6:	f7ff fad7 	bl	8000598 <HAL_GetTick>
 8000fea:	4607      	mov	r7, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 8000fec:	b92d      	cbnz	r5, 8000ffa <HAL_SD_ReadBlocks+0x26>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8000fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ff0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000

    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8000ff4:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	e010      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
  if(hsd->State == HAL_SD_STATE_READY)
 8000ffa:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8000ffe:	b2c0      	uxtb	r0, r0
 8001000:	2801      	cmp	r0, #1
 8001002:	f040 80f1 	bne.w	80011e8 <HAL_SD_ReadBlocks+0x214>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001006:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001008:	eb06 0309 	add.w	r3, r6, r9
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800100c:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800100e:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001010:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001012:	d906      	bls.n	8001022 <HAL_SD_ReadBlocks+0x4e>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001014:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 800101c:	b007      	add	sp, #28
 800101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001022:	2303      	movs	r3, #3
 8001024:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001028:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800102a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 800102c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800102e:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001030:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001034:	bf18      	it	ne
 8001036:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001038:	f000 fcd5 	bl	80019e6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800103c:	b148      	cbz	r0, 8001052 <HAL_SD_ReadBlocks+0x7e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 8001042:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001044:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001046:	4318      	orrs	r0, r3
 8001048:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800104a:	2001      	movs	r0, #1
 800104c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001050:	e7e4      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001058:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800105c:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800105e:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001060:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001062:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001066:	f04f 0b02 	mov.w	fp, #2
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800106a:	4669      	mov	r1, sp
 800106c:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800106e:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001070:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001074:	f8cd a014 	str.w	sl, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001078:	f000 fca2 	bl	80019c0 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800107c:	45d1      	cmp	r9, sl
 800107e:	d912      	bls.n	80010a6 <HAL_SD_ReadBlocks+0xd2>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001080:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001084:	4631      	mov	r1, r6
 8001086:	6820      	ldr	r0, [r4, #0]
 8001088:	f000 fcdd 	bl	8001a46 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800108c:	b190      	cbz	r0, 80010b4 <HAL_SD_ReadBlocks+0xe0>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	4a57      	ldr	r2, [pc, #348]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001096:	4318      	orrs	r0, r3
 8001098:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800109a:	2001      	movs	r0, #1
        hsd->Context = SD_CONTEXT_NONE;
 800109c:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 800109e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80010a2:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80010a4:	e7ba      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80010a6:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80010aa:	4631      	mov	r1, r6
 80010ac:	6820      	ldr	r0, [r4, #0]
 80010ae:	f000 fcb2 	bl	8001a16 <SDMMC_CmdReadSingleBlock>
 80010b2:	e7eb      	b.n	800108c <HAL_SD_ReadBlocks+0xb8>
    dataremaining = config.DataLength;
 80010b4:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80010b8:	6820      	ldr	r0, [r4, #0]
 80010ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80010bc:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80010c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80010c2:	d017      	beq.n	80010f4 <HAL_SD_ReadBlocks+0x120>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80010c4:	05de      	lsls	r6, r3, #23
 80010c6:	d509      	bpl.n	80010dc <HAL_SD_ReadBlocks+0x108>
 80010c8:	f1b9 0f01 	cmp.w	r9, #1
 80010cc:	d906      	bls.n	80010dc <HAL_SD_ReadBlocks+0x108>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80010ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d003      	beq.n	80010dc <HAL_SD_ReadBlocks+0x108>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80010d4:	f000 fd00 	bl	8001ad8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80010d8:	2800      	cmp	r0, #0
 80010da:	d1d8      	bne.n	800108e <HAL_SD_ReadBlocks+0xba>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010e0:	f011 0108 	ands.w	r1, r1, #8
 80010e4:	d035      	beq.n	8001152 <HAL_SD_ReadBlocks+0x17e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80010e6:	4a42      	ldr	r2, [pc, #264]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80010ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010ec:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80010f0:	63a3      	str	r3, [r4, #56]	; 0x38
 80010f2:	e7d2      	b.n	800109a <HAL_SD_ReadBlocks+0xc6>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80010f4:	041b      	lsls	r3, r3, #16
 80010f6:	d519      	bpl.n	800112c <HAL_SD_ReadBlocks+0x158>
 80010f8:	f1ba 0f00 	cmp.w	sl, #0
 80010fc:	d016      	beq.n	800112c <HAL_SD_ReadBlocks+0x158>
 80010fe:	1d2e      	adds	r6, r5, #4
 8001100:	f105 0b24 	add.w	fp, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8001104:	6820      	ldr	r0, [r4, #0]
 8001106:	f000 fc31 	bl	800196c <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800110a:	0a03      	lsrs	r3, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 800110c:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001110:	f806 3c03 	strb.w	r3, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001114:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001116:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001118:	f806 3c02 	strb.w	r3, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800111c:	f806 0c01 	strb.w	r0, [r6, #-1]
 8001120:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 8001122:	455e      	cmp	r6, fp
 8001124:	d1ee      	bne.n	8001104 <HAL_SD_ReadBlocks+0x130>
 8001126:	3520      	adds	r5, #32
 8001128:	f1aa 0a20 	sub.w	sl, sl, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800112c:	f7ff fa34 	bl	8000598 <HAL_GetTick>
 8001130:	1bc0      	subs	r0, r0, r7
 8001132:	4540      	cmp	r0, r8
 8001134:	d3c0      	bcc.n	80010b8 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	4a2d      	ldr	r2, [pc, #180]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800113c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800113e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001142:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001144:	2301      	movs	r3, #1
 8001146:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 800114e:	2003      	movs	r0, #3
 8001150:	e764      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001154:	f012 0202 	ands.w	r2, r2, #2
 8001158:	d00a      	beq.n	8001170 <HAL_SD_ReadBlocks+0x19c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800115e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001160:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001168:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800116c:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 800116e:	e755      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001172:	0689      	lsls	r1, r1, #26
 8001174:	d50a      	bpl.n	800118c <HAL_SD_ReadBlocks+0x1b8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001176:	491e      	ldr	r1, [pc, #120]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 8001178:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800117a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800117c:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001184:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001188:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 800118a:	e747      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
 800118c:	1d2e      	adds	r6, r5, #4
 800118e:	f10a 0a04 	add.w	sl, sl, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001192:	6820      	ldr	r0, [r4, #0]
 8001194:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001196:	029b      	lsls	r3, r3, #10
 8001198:	d407      	bmi.n	80011aa <HAL_SD_ReadBlocks+0x1d6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800119a:	f240 533a 	movw	r3, #1338	; 0x53a
 800119e:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80011a0:	2301      	movs	r3, #1
 80011a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 80011a6:	2000      	movs	r0, #0
 80011a8:	e738      	b.n	800101c <HAL_SD_ReadBlocks+0x48>
 80011aa:	ebaa 0306 	sub.w	r3, sl, r6
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80011ae:	42dd      	cmn	r5, r3
 80011b0:	d0f3      	beq.n	800119a <HAL_SD_ReadBlocks+0x1c6>
      data = SDIO_ReadFIFO(hsd->Instance);
 80011b2:	f000 fbdb 	bl	800196c <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80011b6:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 80011b8:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80011bc:	f806 3c03 	strb.w	r3, [r6, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80011c0:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80011c2:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80011c4:	f806 3c02 	strb.w	r3, [r6, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80011c8:	f806 0c01 	strb.w	r0, [r6, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80011cc:	f7ff f9e4 	bl	8000598 <HAL_GetTick>
 80011d0:	1bc0      	subs	r0, r0, r7
 80011d2:	4580      	cmp	r8, r0
 80011d4:	f106 0604 	add.w	r6, r6, #4
 80011d8:	d8db      	bhi.n	8001192 <HAL_SD_ReadBlocks+0x1be>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <HAL_SD_ReadBlocks+0x21c>)
 80011de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80011e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011e6:	e783      	b.n	80010f0 <HAL_SD_ReadBlocks+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80011e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ee:	e701      	b.n	8000ff4 <HAL_SD_ReadBlocks+0x20>
 80011f0:	004005ff 	.word	0x004005ff

080011f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	b088      	sub	sp, #32
 80011fa:	4604      	mov	r4, r0
 80011fc:	460e      	mov	r6, r1
 80011fe:	4691      	mov	r9, r2
 8001200:	461f      	mov	r7, r3
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001202:	f7ff f9c9 	bl	8000598 <HAL_GetTick>
 8001206:	4680      	mov	r8, r0
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
  uint8_t *tempbuff = pData;

  if(NULL == pData)
 8001208:	b92e      	cbnz	r6, 8001216 <HAL_SD_WriteBlocks+0x22>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800120a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800120c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000

    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001210:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
 8001214:	e010      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8001216:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800121a:	b2c0      	uxtb	r0, r0
 800121c:	2801      	cmp	r0, #1
 800121e:	f040 80b7 	bne.w	8001390 <HAL_SD_WriteBlocks+0x19c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001222:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001224:	eb09 0307 	add.w	r3, r9, r7
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001228:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800122a:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800122c:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800122e:	d906      	bls.n	800123e <HAL_SD_WriteBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001230:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001236:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8001238:	b008      	add	sp, #32
 800123a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 800123e:	2303      	movs	r3, #3
 8001240:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001244:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001246:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001248:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800124a:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001250:	bf18      	it	ne
 8001252:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001256:	f000 fbc6 	bl	80019e6 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800125a:	b148      	cbz	r0, 8001270 <HAL_SD_WriteBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 8001260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001262:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001264:	4318      	orrs	r0, r3
 8001266:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001268:	2001      	movs	r0, #1
 800126a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800126e:	e7e3      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001270:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001274:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001276:	027b      	lsls	r3, r7, #9
 8001278:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800127a:	2390      	movs	r3, #144	; 0x90
 800127c:	9304      	str	r3, [sp, #16]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800127e:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001280:	9006      	str	r0, [sp, #24]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001282:	2301      	movs	r3, #1
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001284:	a902      	add	r1, sp, #8
 8001286:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001288:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800128a:	f000 fb99 	bl	80019c0 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800128e:	2f01      	cmp	r7, #1
 8001290:	d912      	bls.n	80012b8 <HAL_SD_WriteBlocks+0xc4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001292:	2320      	movs	r3, #32
 8001294:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001296:	4649      	mov	r1, r9
 8001298:	6820      	ldr	r0, [r4, #0]
 800129a:	f000 fc04 	bl	8001aa6 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800129e:	b190      	cbz	r0, 80012c6 <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	4a3d      	ldr	r2, [pc, #244]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80012a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012a8:	4318      	orrs	r0, r3
 80012aa:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80012ac:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 80012ae:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 80012b0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80012b4:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80012b6:	e7bf      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80012b8:	2310      	movs	r3, #16
 80012ba:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80012bc:	4649      	mov	r1, r9
 80012be:	6820      	ldr	r0, [r4, #0]
 80012c0:	f000 fbd9 	bl	8001a76 <SDMMC_CmdWriteSingleBlock>
 80012c4:	e7eb      	b.n	800129e <HAL_SD_WriteBlocks+0xaa>
    dataremaining = config.DataLength;
 80012c6:	9d03      	ldr	r5, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80012c8:	6820      	ldr	r0, [r4, #0]
 80012ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80012cc:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80012d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80012d2:	d016      	beq.n	8001302 <HAL_SD_WriteBlocks+0x10e>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	d508      	bpl.n	80012ea <HAL_SD_WriteBlocks+0xf6>
 80012d8:	2f01      	cmp	r7, #1
 80012da:	d906      	bls.n	80012ea <HAL_SD_WriteBlocks+0xf6>
      if(hsd->SdCard.CardType != CARD_SECURED)
 80012dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d003      	beq.n	80012ea <HAL_SD_WriteBlocks+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80012e2:	f000 fbf9 	bl	8001ad8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d1da      	bne.n	80012a0 <HAL_SD_WriteBlocks+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ee:	f011 0108 	ands.w	r1, r1, #8
 80012f2:	d028      	beq.n	8001346 <HAL_SD_WriteBlocks+0x152>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 80012f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80012f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012fa:	f043 0308 	orr.w	r3, r3, #8
 80012fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8001300:	e7d4      	b.n	80012ac <HAL_SD_WriteBlocks+0xb8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001302:	045a      	lsls	r2, r3, #17
 8001304:	d50c      	bpl.n	8001320 <HAL_SD_WriteBlocks+0x12c>
 8001306:	b15d      	cbz	r5, 8001320 <HAL_SD_WriteBlocks+0x12c>
 8001308:	f106 0a20 	add.w	sl, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 800130c:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001310:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001312:	9301      	str	r3, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001314:	a901      	add	r1, sp, #4
 8001316:	f000 fb2c 	bl	8001972 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800131a:	45b2      	cmp	sl, r6
 800131c:	d1f6      	bne.n	800130c <HAL_SD_WriteBlocks+0x118>
 800131e:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001320:	f7ff f93a 	bl	8000598 <HAL_GetTick>
 8001324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001326:	eba0 0008 	sub.w	r0, r0, r8
 800132a:	4298      	cmp	r0, r3
 800132c:	d3cc      	bcc.n	80012c8 <HAL_SD_WriteBlocks+0xd4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001334:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001336:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001338:	2301      	movs	r3, #1
 800133a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001342:	2003      	movs	r0, #3
 8001344:	e778      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001348:	f012 0202 	ands.w	r2, r2, #2
 800134c:	d00a      	beq.n	8001364 <HAL_SD_WriteBlocks+0x170>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001352:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001354:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800135c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001360:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001362:	e769      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001364:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001366:	f010 0010 	ands.w	r0, r0, #16
 800136a:	d00a      	beq.n	8001382 <HAL_SD_WriteBlocks+0x18e>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800136c:	490a      	ldr	r1, [pc, #40]	; (8001398 <HAL_SD_WriteBlocks+0x1a4>)
 800136e:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001370:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001372:	2001      	movs	r0, #1
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800137a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800137e:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001380:	e75a      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001382:	f240 523a 	movw	r2, #1338	; 0x53a
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001388:	2301      	movs	r3, #1
 800138a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 800138e:	e753      	b.n	8001238 <HAL_SD_WriteBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001390:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001392:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001396:	e73b      	b.n	8001210 <HAL_SD_WriteBlocks+0x1c>
 8001398:	004005ff 	.word	0x004005ff

0800139c <HAL_SD_GetCardCSD>:
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800139c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800139e:	0f9a      	lsrs	r2, r3, #30
 80013a0:	700a      	strb	r2, [r1, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80013a2:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80013a6:	704a      	strb	r2, [r1, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80013a8:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80013ac:	708a      	strb	r2, [r1, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80013ae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80013b2:	70ca      	strb	r2, [r1, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80013b4:	f3c3 2207 	ubfx	r2, r3, #8, #8

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80013b8:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80013ba:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80013bc:	714b      	strb	r3, [r1, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80013be:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80013c0:	0d1a      	lsrs	r2, r3, #20
 80013c2:	80ca      	strh	r2, [r1, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80013c4:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80013c8:	720a      	strb	r2, [r1, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80013ca:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80013ce:	724a      	strb	r2, [r1, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80013d0:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80013d4:	728a      	strb	r2, [r1, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80013d6:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80013da:	72ca      	strb	r2, [r1, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80013dc:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80013e0:	730a      	strb	r2, [r1, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80013e2:	2200      	movs	r2, #0
 80013e4:	734a      	strb	r2, [r1, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80013e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
{
 80013e8:	b510      	push	{r4, lr}
  if(hsd->SdCard.CardType == CARD_SDSC)
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d16b      	bne.n	80014c6 <HAL_SD_GetCardCSD+0x12a>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80013ee:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80013f0:	f640 74fc 	movw	r4, #4092	; 0xffc
 80013f4:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 80013f8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 80013fc:	610b      	str	r3, [r1, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80013fe:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001402:	750b      	strb	r3, [r1, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8001404:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001408:	754b      	strb	r3, [r1, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800140a:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800140e:	758b      	strb	r3, [r1, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001410:	f3c2 4382 	ubfx	r3, r2, #18, #3

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8001414:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8001418:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800141a:	760a      	strb	r2, [r1, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800141c:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800141e:	7e0a      	ldrb	r2, [r1, #24]
 8001420:	f002 0207 	and.w	r2, r2, #7
 8001424:	3202      	adds	r2, #2
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001426:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001428:	4093      	lsls	r3, r2
 800142a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800142c:	7a0a      	ldrb	r2, [r1, #8]
 800142e:	f002 040f 	and.w	r4, r2, #15
 8001432:	2201      	movs	r2, #1
 8001434:	40a2      	lsls	r2, r4
 8001436:	6582      	str	r2, [r0, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8001438:	0a52      	lsrs	r2, r2, #9
 800143a:	4353      	muls	r3, r2
 800143c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800143e:	f44f 7300 	mov.w	r3, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
    hsd->SdCard.BlockSize = 512U;
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8001442:	6603      	str	r3, [r0, #96]	; 0x60
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    hsd->State = HAL_SD_STATE_READY;
    return HAL_ERROR;
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8001444:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001446:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800144a:	764a      	strb	r2, [r1, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800144c:	f3c3 12c6 	ubfx	r2, r3, #7, #7

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8001454:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8001456:	76cb      	strb	r3, [r1, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8001458:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800145a:	0fda      	lsrs	r2, r3, #31
 800145c:	770a      	strb	r2, [r1, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800145e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001462:	774a      	strb	r2, [r1, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8001464:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001468:	778a      	strb	r2, [r1, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800146a:	f3c3 5283 	ubfx	r2, r3, #22, #4
 800146e:	77ca      	strb	r2, [r1, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8001470:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001474:	f881 2020 	strb.w	r2, [r1, #32]

  pCSD->Reserved3 = 0;
 8001478:	2000      	movs	r0, #0

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800147a:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 800147e:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8001482:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8001486:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800148a:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800148e:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001492:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8001496:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800149a:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800149e:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80014a2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80014a6:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80014aa:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80014ae:	f3c3 2201 	ubfx	r2, r3, #8, #2

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80014b2:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80014b6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80014ba:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a

  return HAL_OK;
}
 80014c4:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80014c6:	2a01      	cmp	r2, #1
 80014c8:	d10f      	bne.n	80014ea <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80014ca:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80014d4:	4313      	orrs	r3, r2
 80014d6:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80014d8:	690b      	ldr	r3, [r1, #16]
 80014da:	3301      	adds	r3, #1
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80014e0:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80014e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014e6:	6583      	str	r3, [r0, #88]	; 0x58
 80014e8:	e7ab      	b.n	8001442 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80014ea:	6803      	ldr	r3, [r0, #0]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_SD_GetCardCSD+0x168>)
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80014f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80014fe:	4618      	mov	r0, r3
 8001500:	bd10      	pop	{r4, pc}
 8001502:	bf00      	nop
 8001504:	004005ff 	.word	0x004005ff

08001508 <HAL_SD_InitCard>:
{
 8001508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800150e:	2300      	movs	r3, #0
 8001510:	9307      	str	r3, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001512:	9308      	str	r3, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001514:	9309      	str	r3, [sp, #36]	; 0x24
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001516:	930a      	str	r3, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001518:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800151a:	2376      	movs	r3, #118	; 0x76
 800151c:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 800151e:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001520:	4604      	mov	r4, r0
  status = SDIO_Init(hsd->Instance, Init);
 8001522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001526:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800152a:	ab07      	add	r3, sp, #28
 800152c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800152e:	6820      	ldr	r0, [r4, #0]
 8001530:	f000 fa00 	bl	8001934 <SDIO_Init>
  if(status != HAL_OK)
 8001534:	4605      	mov	r5, r0
 8001536:	2800      	cmp	r0, #0
 8001538:	f040 808e 	bne.w	8001658 <HAL_SD_InitCard+0x150>
  __HAL_SD_DISABLE(hsd);
 800153c:	4f6e      	ldr	r7, [pc, #440]	; (80016f8 <HAL_SD_InitCard+0x1f0>)
  __HAL_SD_ENABLE(hsd);
 800153e:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 8001540:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8001542:	6820      	ldr	r0, [r4, #0]
 8001544:	f000 fa1a 	bl	800197c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001548:	603e      	str	r6, [r7, #0]
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800154a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800154c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800154e:	f000 faf5 	bl	8001b3c <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001552:	4605      	mov	r5, r0
 8001554:	2800      	cmp	r0, #0
 8001556:	d179      	bne.n	800164c <HAL_SD_InitCard+0x144>
  {
    return errorstate;
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001558:	6820      	ldr	r0, [r4, #0]
 800155a:	f000 fb17 	bl	8001b8c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800155e:	b130      	cbz	r0, 800156e <HAL_SD_InitCard+0x66>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001560:	64a5      	str	r5, [r4, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001562:	6820      	ldr	r0, [r4, #0]
 8001564:	f000 faea 	bl	8001b3c <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001568:	b110      	cbz	r0, 8001570 <HAL_SD_InitCard+0x68>
 800156a:	4605      	mov	r5, r0
 800156c:	e06e      	b.n	800164c <HAL_SD_InitCard+0x144>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800156e:	64a6      	str	r6, [r4, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8001570:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001572:	2b01      	cmp	r3, #1
 8001574:	d062      	beq.n	800163c <HAL_SD_InitCard+0x134>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
    }
  }
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001576:	f64f 76fe 	movw	r6, #65534	; 0xfffe
    {
      return errorstate;
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800157a:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80016fc <HAL_SD_InitCard+0x1f4>
{
 800157e:	2100      	movs	r1, #0
 8001580:	4637      	mov	r7, r6
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8001582:	9b06      	ldr	r3, [sp, #24]
 8001584:	42b3      	cmp	r3, r6
 8001586:	d969      	bls.n	800165c <HAL_SD_InitCard+0x154>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);

    count++;
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8001588:	9b06      	ldr	r3, [sp, #24]
 800158a:	42bb      	cmp	r3, r7
 800158c:	f200 80aa 	bhi.w	80016e4 <HAL_SD_InitCard+0x1dc>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001590:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 8001594:	f04f 0301 	mov.w	r3, #1
 8001598:	bf18      	it	ne
 800159a:	461d      	movne	r5, r3
 800159c:	6465      	str	r5, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800159e:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 80015a0:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80015a4:	f000 f9f2 	bl	800198c <SDIO_GetPowerState>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	f000 809e 	beq.w	80016ea <HAL_SD_InitCard+0x1e2>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80015ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d019      	beq.n	80015e8 <HAL_SD_InitCard+0xe0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	f000 fb58 	bl	8001c6a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d16d      	bne.n	800169a <HAL_SD_InitCard+0x192>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80015be:	4601      	mov	r1, r0
 80015c0:	6820      	ldr	r0, [r4, #0]
 80015c2:	f000 f9fa 	bl	80019ba <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80015c6:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80015c8:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80015ca:	6820      	ldr	r0, [r4, #0]
 80015cc:	f000 f9f5 	bl	80019ba <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80015d0:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80015d2:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	f000 f9f0 	bl	80019ba <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80015da:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80015dc:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80015de:	6820      	ldr	r0, [r4, #0]
 80015e0:	f000 f9eb 	bl	80019ba <SDIO_GetResponse>
 80015e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 80015e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ea:	2b03      	cmp	r3, #3
 80015ec:	d14e      	bne.n	800168c <HAL_SD_InitCard+0x184>
  if(hsd->SdCard.CardType != CARD_SECURED)
 80015ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d159      	bne.n	80016a8 <HAL_SD_InitCard+0x1a0>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80015f4:	2104      	movs	r1, #4
 80015f6:	6820      	ldr	r0, [r4, #0]
 80015f8:	f000 f9df 	bl	80019ba <SDIO_GetResponse>
 80015fc:	0d00      	lsrs	r0, r0, #20
 80015fe:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8001600:	a90d      	add	r1, sp, #52	; 0x34
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff feca 	bl	800139c <HAL_SD_GetCardCSD>
 8001608:	4605      	mov	r5, r0
 800160a:	2800      	cmp	r0, #0
 800160c:	d170      	bne.n	80016f0 <HAL_SD_InitCard+0x1e8>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800160e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001610:	4603      	mov	r3, r0
 8001612:	0412      	lsls	r2, r2, #16
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	f000 fa79 	bl	8001b0c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800161a:	2800      	cmp	r0, #0
 800161c:	d13d      	bne.n	800169a <HAL_SD_InitCard+0x192>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800161e:	f104 0310 	add.w	r3, r4, #16
 8001622:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001626:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800162a:	1d23      	adds	r3, r4, #4
 800162c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800162e:	6820      	ldr	r0, [r4, #0]
 8001630:	f000 f980 	bl	8001934 <SDIO_Init>
}
 8001634:	4628      	mov	r0, r5
 8001636:	b018      	add	sp, #96	; 0x60
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800163c:	2100      	movs	r1, #0
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	f000 fae2 	bl	8001c08 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001644:	2800      	cmp	r0, #0
 8001646:	d096      	beq.n	8001576 <HAL_SD_InitCard+0x6e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001648:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800164c:	2301      	movs	r3, #1
 800164e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001652:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001654:	4315      	orrs	r5, r2
 8001656:	63a5      	str	r5, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001658:	2501      	movs	r5, #1
 800165a:	e7eb      	b.n	8001634 <HAL_SD_InitCard+0x12c>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800165c:	2900      	cmp	r1, #0
 800165e:	d193      	bne.n	8001588 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8001660:	6820      	ldr	r0, [r4, #0]
 8001662:	f000 fad1 	bl	8001c08 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001666:	4605      	mov	r5, r0
 8001668:	2800      	cmp	r0, #0
 800166a:	d1ef      	bne.n	800164c <HAL_SD_InitCard+0x144>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800166c:	4641      	mov	r1, r8
 800166e:	6820      	ldr	r0, [r4, #0]
 8001670:	f000 fae2 	bl	8001c38 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001674:	2800      	cmp	r0, #0
 8001676:	d1e7      	bne.n	8001648 <HAL_SD_InitCard+0x140>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001678:	4629      	mov	r1, r5
 800167a:	6820      	ldr	r0, [r4, #0]
 800167c:	f000 f99d 	bl	80019ba <SDIO_GetResponse>
    count++;
 8001680:	9b06      	ldr	r3, [sp, #24]
 8001682:	3301      	adds	r3, #1
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001684:	4605      	mov	r5, r0
    count++;
 8001686:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001688:	0fc1      	lsrs	r1, r0, #31
 800168a:	e77a      	b.n	8001582 <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800168c:	f10d 0116 	add.w	r1, sp, #22
 8001690:	6820      	ldr	r0, [r4, #0]
 8001692:	f000 fb15 	bl	8001cc0 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001696:	2800      	cmp	r0, #0
 8001698:	d0a9      	beq.n	80015ee <HAL_SD_InitCard+0xe6>
    hsd->State = HAL_SD_STATE_READY;
 800169a:	2501      	movs	r5, #1
 800169c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80016a0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80016a2:	4308      	orrs	r0, r1
 80016a4:	63a0      	str	r0, [r4, #56]	; 0x38
 80016a6:	e7c5      	b.n	8001634 <HAL_SD_InitCard+0x12c>
    hsd->SdCard.RelCardAdd = sd_rca;
 80016a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80016ac:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80016ae:	6820      	ldr	r0, [r4, #0]
 80016b0:	0409      	lsls	r1, r1, #16
 80016b2:	f000 faef 	bl	8001c94 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80016b6:	2800      	cmp	r0, #0
 80016b8:	d1ef      	bne.n	800169a <HAL_SD_InitCard+0x192>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80016ba:	4601      	mov	r1, r0
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f000 f97c 	bl	80019ba <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80016c2:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80016c4:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	f000 f977 	bl	80019ba <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80016cc:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80016ce:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80016d0:	6820      	ldr	r0, [r4, #0]
 80016d2:	f000 f972 	bl	80019ba <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80016d6:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80016d8:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	f000 f96d 	bl	80019ba <SDIO_GetResponse>
 80016e0:	6720      	str	r0, [r4, #112]	; 0x70
 80016e2:	e787      	b.n	80015f4 <HAL_SD_InitCard+0xec>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80016e4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 80016e8:	e7b0      	b.n	800164c <HAL_SD_InitCard+0x144>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80016ea:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80016ee:	e7d4      	b.n	800169a <HAL_SD_InitCard+0x192>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80016f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80016f4:	e7d1      	b.n	800169a <HAL_SD_InitCard+0x192>
 80016f6:	bf00      	nop
 80016f8:	422580a0 	.word	0x422580a0
 80016fc:	c1100000 	.word	0xc1100000

08001700 <HAL_SD_Init>:
{
 8001700:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8001702:	4604      	mov	r4, r0
 8001704:	b908      	cbnz	r0, 800170a <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8001706:	2001      	movs	r0, #1
 8001708:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800170a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800170e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001712:	b913      	cbnz	r3, 800171a <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8001714:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8001716:	f001 fe3b 	bl	8003390 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800171a:	2303      	movs	r3, #3
 800171c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff fef1 	bl	8001508 <HAL_SD_InitCard>
 8001726:	2800      	cmp	r0, #0
 8001728:	d1ed      	bne.n	8001706 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 800172a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800172c:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800172e:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8001730:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001734:	bd10      	pop	{r4, pc}

08001736 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001736:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001738:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800173a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800173c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800173e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001740:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001742:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001744:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001746:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001748:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800174a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800174c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800174e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001750:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001752:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001754:	61cb      	str	r3, [r1, #28]
}
 8001756:	2000      	movs	r0, #0
 8001758:	4770      	bx	lr

0800175a <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800175a:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800175c:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800175e:	0409      	lsls	r1, r1, #16
{
 8001760:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001762:	6800      	ldr	r0, [r0, #0]
 8001764:	f000 fafc 	bl	8001d60 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001768:	4601      	mov	r1, r0
 800176a:	b928      	cbnz	r0, 8001778 <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800176c:	6820      	ldr	r0, [r4, #0]
 800176e:	f000 f924 	bl	80019ba <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001772:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8001776:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8001778:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800177a:	4319      	orrs	r1, r3
 800177c:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800177e:	2000      	movs	r0, #0
 8001780:	e7f7      	b.n	8001772 <HAL_SD_GetCardState+0x18>
	...

08001784 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001784:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <SDMMC_GetCmdResp2+0x4c>)
 8001786:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001790:	f241 3388 	movw	r3, #5000	; 0x1388
 8001794:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8001796:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800179a:	d315      	bcc.n	80017c8 <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 800179c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800179e:	f012 0f45 	tst.w	r2, #69	; 0x45
 80017a2:	d0f8      	beq.n	8001796 <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80017a4:	0512      	lsls	r2, r2, #20
 80017a6:	d4f6      	bmi.n	8001796 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80017a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017aa:	075b      	lsls	r3, r3, #29
 80017ac:	d503      	bpl.n	80017b6 <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80017ae:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80017b0:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80017b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017b8:	f013 0301 	ands.w	r3, r3, #1
 80017bc:	d001      	beq.n	80017c2 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80017be:	2301      	movs	r3, #1
 80017c0:	e7f6      	b.n	80017b0 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80017c2:	22c5      	movs	r2, #197	; 0xc5
 80017c4:	6382      	str	r2, [r0, #56]	; 0x38
 80017c6:	e7f4      	b.n	80017b2 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80017c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017cc:	e7f1      	b.n	80017b2 <SDMMC_GetCmdResp2+0x2e>
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c

080017d4 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <SDMMC_GetCmdResp3+0x40>)
 80017d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80017e4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80017e6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80017ea:	d30f      	bcc.n	800180c <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80017ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80017ee:	f012 0f45 	tst.w	r2, #69	; 0x45
 80017f2:	d0f8      	beq.n	80017e6 <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80017f4:	0512      	lsls	r2, r2, #20
 80017f6:	d4f6      	bmi.n	80017e6 <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80017f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017fa:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80017fe:	bf15      	itete	ne
 8001800:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001802:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001804:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001806:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8001808:	4618      	mov	r0, r3
 800180a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800180c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2000000c 	.word	0x2000000c

08001818 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8001818:	4b44      	ldr	r3, [pc, #272]	; (800192c <SDMMC_GetCmdResp1+0x114>)
{
 800181a:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8001822:	fbb3 f3f4 	udiv	r3, r3, r4
 8001826:	435a      	muls	r2, r3
    if (count-- == 0U)
 8001828:	2a00      	cmp	r2, #0
 800182a:	d04a      	beq.n	80018c2 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 800182c:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800182e:	f013 0f45 	tst.w	r3, #69	; 0x45
 8001832:	d008      	beq.n	8001846 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001834:	051c      	lsls	r4, r3, #20
 8001836:	d406      	bmi.n	8001846 <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001838:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800183a:	075b      	lsls	r3, r3, #29
 800183c:	d505      	bpl.n	800184a <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800183e:	2304      	movs	r3, #4
 8001840:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8001842:	4618      	mov	r0, r3
 8001844:	bd10      	pop	{r4, pc}
 8001846:	3a01      	subs	r2, #1
 8001848:	e7ee      	b.n	8001828 <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800184a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800184c:	07dc      	lsls	r4, r3, #31
 800184e:	d503      	bpl.n	8001858 <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001850:	2301      	movs	r3, #1
 8001852:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001854:	2001      	movs	r0, #1
 8001856:	bd10      	pop	{r4, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001858:	23c5      	movs	r3, #197	; 0xc5
 800185a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 800185c:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4299      	cmp	r1, r3
 8001862:	d1f7      	bne.n	8001854 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8001864:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8001866:	4832      	ldr	r0, [pc, #200]	; (8001930 <SDMMC_GetCmdResp1+0x118>)
 8001868:	4018      	ands	r0, r3
 800186a:	2800      	cmp	r0, #0
 800186c:	d05c      	beq.n	8001928 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800186e:	2b00      	cmp	r3, #0
 8001870:	db2a      	blt.n	80018c8 <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8001872:	005a      	lsls	r2, r3, #1
 8001874:	d42b      	bmi.n	80018ce <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8001876:	009c      	lsls	r4, r3, #2
 8001878:	d42b      	bmi.n	80018d2 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800187a:	00d9      	lsls	r1, r3, #3
 800187c:	d42b      	bmi.n	80018d6 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800187e:	011a      	lsls	r2, r3, #4
 8001880:	d42c      	bmi.n	80018dc <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8001882:	015c      	lsls	r4, r3, #5
 8001884:	d42d      	bmi.n	80018e2 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8001886:	01d9      	lsls	r1, r3, #7
 8001888:	d42e      	bmi.n	80018e8 <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800188a:	021a      	lsls	r2, r3, #8
 800188c:	d42f      	bmi.n	80018ee <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800188e:	025c      	lsls	r4, r3, #9
 8001890:	d430      	bmi.n	80018f4 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8001892:	0299      	lsls	r1, r3, #10
 8001894:	d431      	bmi.n	80018fa <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8001896:	02da      	lsls	r2, r3, #11
 8001898:	d432      	bmi.n	8001900 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800189a:	035c      	lsls	r4, r3, #13
 800189c:	d433      	bmi.n	8001906 <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800189e:	0399      	lsls	r1, r3, #14
 80018a0:	d434      	bmi.n	800190c <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80018a2:	03da      	lsls	r2, r3, #15
 80018a4:	d435      	bmi.n	8001912 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80018a6:	041c      	lsls	r4, r3, #16
 80018a8:	d436      	bmi.n	8001918 <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80018aa:	0459      	lsls	r1, r3, #17
 80018ac:	d437      	bmi.n	800191e <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80018ae:	049a      	lsls	r2, r3, #18
 80018b0:	d438      	bmi.n	8001924 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80018b2:	f013 0f08 	tst.w	r3, #8
 80018b6:	bf0c      	ite	eq
 80018b8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80018bc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80018c0:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80018c2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80018c6:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80018c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80018cc:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80018ce:	2040      	movs	r0, #64	; 0x40
 80018d0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80018d2:	2080      	movs	r0, #128	; 0x80
 80018d4:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80018d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018da:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80018dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018e0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80018e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80018e6:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80018e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018ec:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 80018ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018f2:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80018f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018f8:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80018fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018fe:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8001900:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001904:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8001906:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800190a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800190c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001910:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8001912:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001916:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8001918:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800191c:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800191e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001922:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8001924:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 8001928:	bd10      	pop	{r4, pc}
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c
 8001930:	fdffe008 	.word	0xfdffe008

08001934 <SDIO_Init>:
{
 8001934:	b084      	sub	sp, #16
 8001936:	b510      	push	{r4, lr}
 8001938:	ac03      	add	r4, sp, #12
 800193a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800193e:	9904      	ldr	r1, [sp, #16]
 8001940:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8001942:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8001944:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8001946:	9905      	ldr	r1, [sp, #20]
 8001948:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800194a:	9906      	ldr	r1, [sp, #24]
 800194c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800194e:	9907      	ldr	r1, [sp, #28]
 8001950:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8001952:	9908      	ldr	r1, [sp, #32]
}
 8001954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8001958:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800195c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800195e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8001962:	4313      	orrs	r3, r2
 8001964:	6043      	str	r3, [r0, #4]
}
 8001966:	b004      	add	sp, #16
 8001968:	2000      	movs	r0, #0
 800196a:	4770      	bx	lr

0800196c <SDIO_ReadFIFO>:
 800196c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8001970:	4770      	bx	lr

08001972 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8001972:	680b      	ldr	r3, [r1, #0]
 8001974:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8001978:	2000      	movs	r0, #0
 800197a:	4770      	bx	lr

0800197c <SDIO_PowerState_ON>:
{  
 800197c:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800197e:	2303      	movs	r3, #3
 8001980:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe fe0e 	bl	80005a4 <HAL_Delay>
}
 8001988:	2000      	movs	r0, #0
 800198a:	bd08      	pop	{r3, pc}

0800198c <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800198c:	6800      	ldr	r0, [r0, #0]
}
 800198e:	f000 0003 	and.w	r0, r0, #3
 8001992:	4770      	bx	lr

08001994 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8001994:	680b      	ldr	r3, [r1, #0]
{
 8001996:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8001998:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800199a:	688c      	ldr	r4, [r1, #8]
 800199c:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800199e:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80019a0:	4323      	orrs	r3, r4
                       Command->Response         |\
 80019a2:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80019a4:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80019a6:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80019a8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80019ac:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80019ae:	f022 020f 	bic.w	r2, r2, #15
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60c3      	str	r3, [r0, #12]
}
 80019b6:	2000      	movs	r0, #0
 80019b8:	bd10      	pop	{r4, pc}

080019ba <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80019ba:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80019bc:	5840      	ldr	r0, [r0, r1]
}  
 80019be:	4770      	bx	lr

080019c0 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80019c0:	680b      	ldr	r3, [r1, #0]
{
 80019c2:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80019c4:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80019c6:	684b      	ldr	r3, [r1, #4]
 80019c8:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80019ca:	68cc      	ldr	r4, [r1, #12]
 80019cc:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80019ce:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80019d0:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80019d2:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80019d4:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80019d6:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80019d8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80019da:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80019de:	4313      	orrs	r3, r2
 80019e0:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd10      	pop	{r4, pc}

080019e6 <SDMMC_CmdBlockLength>:
{
 80019e6:	b530      	push	{r4, r5, lr}
 80019e8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80019ea:	2340      	movs	r3, #64	; 0x40
 80019ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80019ee:	2300      	movs	r3, #0
{
 80019f0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80019f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80019f4:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80019f6:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80019f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80019fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019fe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8001a00:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a02:	f7ff ffc7 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f7ff ff03 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001a12:	b007      	add	sp, #28
 8001a14:	bd30      	pop	{r4, r5, pc}

08001a16 <SDMMC_CmdReadSingleBlock>:
{
 8001a16:	b530      	push	{r4, r5, lr}
 8001a18:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a1e:	2300      	movs	r3, #0
{
 8001a20:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8001a22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8001a24:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a26:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a28:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8001a30:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a32:	f7ff ffaf 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7ff feeb 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001a42:	b007      	add	sp, #28
 8001a44:	bd30      	pop	{r4, r5, pc}

08001a46 <SDMMC_CmdReadMultiBlock>:
{
 8001a46:	b530      	push	{r4, r5, lr}
 8001a48:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a4e:	2300      	movs	r3, #0
{
 8001a50:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8001a52:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8001a54:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a56:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a58:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8001a60:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a62:	f7ff ff97 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4628      	mov	r0, r5
 8001a6e:	f7ff fed3 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001a72:	b007      	add	sp, #28
 8001a74:	bd30      	pop	{r4, r5, pc}

08001a76 <SDMMC_CmdWriteSingleBlock>:
{
 8001a76:	b530      	push	{r4, r5, lr}
 8001a78:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001a7a:	2340      	movs	r3, #64	; 0x40
 8001a7c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a7e:	2300      	movs	r3, #0
{
 8001a80:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8001a82:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8001a84:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001a86:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a88:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8001a90:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001a92:	f7ff ff7f 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8001a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff febb 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001aa2:	b007      	add	sp, #28
 8001aa4:	bd30      	pop	{r4, r5, pc}

08001aa6 <SDMMC_CmdWriteMultiBlock>:
{
 8001aa6:	b530      	push	{r4, r5, lr}
 8001aa8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001aaa:	2340      	movs	r3, #64	; 0x40
 8001aac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001aae:	2300      	movs	r3, #0
{
 8001ab0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8001ab2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8001ab4:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ab6:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ab8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001abe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8001ac0:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ac2:	f7ff ff67 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4621      	mov	r1, r4
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff fea3 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001ad2:	b007      	add	sp, #28
 8001ad4:	bd30      	pop	{r4, r5, pc}
	...

08001ad8 <SDMMC_CmdStopTransfer>:
{
 8001ad8:	b530      	push	{r4, r5, lr}
 8001ada:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8001adc:	2300      	movs	r3, #0
{
 8001ade:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8001ae0:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8001ae2:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001ae4:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ae6:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ae8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001aee:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001af0:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8001af2:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001af4:	f7ff ff4e 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <SDMMC_CmdStopTransfer+0x30>)
 8001afa:	4621      	mov	r1, r4
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7ff fe8b 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001b02:	b007      	add	sp, #28
 8001b04:	bd30      	pop	{r4, r5, pc}
 8001b06:	bf00      	nop
 8001b08:	05f5e100 	.word	0x05f5e100

08001b0c <SDMMC_CmdSelDesel>:
{
 8001b0c:	b530      	push	{r4, r5, lr}
 8001b0e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001b14:	2300      	movs	r3, #0
{
 8001b16:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8001b18:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001b1a:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001b1c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8001b22:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001b24:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8001b26:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001b28:	f7ff ff34 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4621      	mov	r1, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	f7ff fe70 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001b38:	b007      	add	sp, #28
 8001b3a:	bd30      	pop	{r4, r5, pc}

08001b3c <SDMMC_CmdGoIdleState>:
{
 8001b3c:	b510      	push	{r4, lr}
 8001b3e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8001b44:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8001b46:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001b48:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001b4a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001b4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b50:	9305      	str	r3, [sp, #20]
{
 8001b52:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001b54:	f7ff ff1e 	bl	8001994 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <SDMMC_CmdGoIdleState+0x4c>)
 8001b5a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b64:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b68:	4353      	muls	r3, r2
    if (count-- == 0U)
 8001b6a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001b6e:	d307      	bcc.n	8001b80 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8001b70:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001b72:	0612      	lsls	r2, r2, #24
 8001b74:	d5f9      	bpl.n	8001b6a <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001b76:	23c5      	movs	r3, #197	; 0xc5
 8001b78:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8001b7a:	2000      	movs	r0, #0
}
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8001b80:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8001b84:	e7fa      	b.n	8001b7c <SDMMC_CmdGoIdleState+0x40>
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c

08001b8c <SDMMC_CmdOperCond>:
{
 8001b8c:	b510      	push	{r4, lr}
 8001b8e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8001b90:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8001b94:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8001b96:	2308      	movs	r3, #8
 8001b98:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ba2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	9305      	str	r3, [sp, #20]
{
 8001baa:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001bac:	f7ff fef2 	bl	8001994 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <SDMMC_CmdOperCond+0x78>)
 8001bb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bc0:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8001bc2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001bc6:	d31a      	bcc.n	8001bfe <SDMMC_CmdOperCond+0x72>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8001bc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001bca:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001bce:	d0f8      	beq.n	8001bc2 <SDMMC_CmdOperCond+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001bd0:	0512      	lsls	r2, r2, #20
 8001bd2:	d4f6      	bmi.n	8001bc2 <SDMMC_CmdOperCond+0x36>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001bd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bd6:	075b      	lsls	r3, r3, #29
 8001bd8:	d503      	bpl.n	8001be2 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001bda:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001bdc:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8001bde:	b006      	add	sp, #24
 8001be0:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001be2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001be4:	f012 0201 	ands.w	r2, r2, #1
 8001be8:	d001      	beq.n	8001bee <SDMMC_CmdOperCond+0x62>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001bea:	2001      	movs	r0, #1
 8001bec:	e7f6      	b.n	8001bdc <SDMMC_CmdOperCond+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8001bee:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001bf0:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8001bf4:	d0f3      	beq.n	8001bde <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8001bf6:	2340      	movs	r3, #64	; 0x40
 8001bf8:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	e7ef      	b.n	8001bde <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8001bfe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001c02:	e7ec      	b.n	8001bde <SDMMC_CmdOperCond+0x52>
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <SDMMC_CmdAppCommand>:
{
 8001c08:	b530      	push	{r4, r5, lr}
 8001c0a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001c10:	2300      	movs	r3, #0
{
 8001c12:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8001c14:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8001c16:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001c18:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c1a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c20:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8001c22:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c24:	f7ff feb6 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	4628      	mov	r0, r5
 8001c30:	f7ff fdf2 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001c34:	b007      	add	sp, #28
 8001c36:	bd30      	pop	{r4, r5, pc}

08001c38 <SDMMC_CmdAppOperCommand>:
{
 8001c38:	b510      	push	{r4, lr}
 8001c3a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8001c3c:	2329      	movs	r3, #41	; 0x29
 8001c3e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8001c40:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001c44:	2340      	movs	r3, #64	; 0x40
 8001c46:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8001c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001c4c:	2300      	movs	r3, #0
{
 8001c4e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8001c50:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001c52:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c54:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5a:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c5c:	f7ff fe9a 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff fdb7 	bl	80017d4 <SDMMC_GetCmdResp3>
}
 8001c66:	b006      	add	sp, #24
 8001c68:	bd10      	pop	{r4, pc}

08001c6a <SDMMC_CmdSendCID>:
{
 8001c6a:	b510      	push	{r4, lr}
 8001c6c:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8001c6e:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8001c70:	2202      	movs	r2, #2
{
 8001c72:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8001c74:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8001c76:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001c78:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8001c7a:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c80:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8001c82:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001c84:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001c86:	f7ff fe85 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff fd7a 	bl	8001784 <SDMMC_GetCmdResp2>
}
 8001c90:	b006      	add	sp, #24
 8001c92:	bd10      	pop	{r4, pc}

08001c94 <SDMMC_CmdSendCSD>:
{
 8001c94:	b510      	push	{r4, lr}
 8001c96:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8001c98:	2309      	movs	r3, #9
 8001c9a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8001c9c:	23c0      	movs	r3, #192	; 0xc0
 8001c9e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ca0:	2300      	movs	r3, #0
{
 8001ca2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8001ca4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ca6:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001ca8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001cb0:	f7ff fe70 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fd65 	bl	8001784 <SDMMC_GetCmdResp2>
}
 8001cba:	b006      	add	sp, #24
 8001cbc:	bd10      	pop	{r4, pc}
	...

08001cc0 <SDMMC_CmdSetRelAdd>:
{
 8001cc0:	b530      	push	{r4, r5, lr}
 8001cc2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8001cc4:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8001cc6:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8001cc8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8001cca:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001ccc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001cce:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8001cd4:	460d      	mov	r5, r1
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001cd6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001cd8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001cda:	9305      	str	r3, [sp, #20]
{
 8001cdc:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001cde:	f7ff fe59 	bl	8001994 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <SDMMC_CmdSetRelAdd+0x9c>)
 8001ce4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fbb3 f2f2 	udiv	r2, r3, r2
 8001cee:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cf2:	4353      	muls	r3, r2
    if (count-- == 0U)
 8001cf4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8001cf8:	d328      	bcc.n	8001d4c <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8001cfa:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8001cfc:	f012 0f45 	tst.w	r2, #69	; 0x45
 8001d00:	d0f8      	beq.n	8001cf4 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8001d02:	0512      	lsls	r2, r2, #20
 8001d04:	d4f6      	bmi.n	8001cf4 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8001d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d08:	0758      	lsls	r0, r3, #29
 8001d0a:	d503      	bpl.n	8001d14 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8001d0c:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001d0e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8001d10:	b007      	add	sp, #28
 8001d12:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8001d14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d16:	07d9      	lsls	r1, r3, #31
 8001d18:	d501      	bpl.n	8001d1e <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	e7f7      	b.n	8001d0e <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8001d1e:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d115      	bne.n	8001d52 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8001d26:	23c5      	movs	r3, #197	; 0xc5
 8001d28:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8001d2a:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8001d2c:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8001d30:	d102      	bne.n	8001d38 <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	802b      	strh	r3, [r5, #0]
 8001d36:	e7eb      	b.n	8001d10 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8001d38:	045a      	lsls	r2, r3, #17
 8001d3a:	d40c      	bmi.n	8001d56 <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8001d3c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001d40:	bf0c      	ite	eq
 8001d42:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8001d46:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001d4a:	e7e1      	b.n	8001d10 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8001d4c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001d50:	e7de      	b.n	8001d10 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8001d52:	2001      	movs	r0, #1
 8001d54:	e7dc      	b.n	8001d10 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8001d56:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d5a:	e7d9      	b.n	8001d10 <SDMMC_CmdSetRelAdd+0x50>
 8001d5c:	2000000c 	.word	0x2000000c

08001d60 <SDMMC_CmdSendStatus>:
{
 8001d60:	b530      	push	{r4, r5, lr}
 8001d62:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001d68:	2300      	movs	r3, #0
{
 8001d6a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8001d6c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8001d6e:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8001d70:	9304      	str	r3, [sp, #16]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001d72:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8001d7a:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8001d7c:	f7ff fe0a 	bl	8001994 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8001d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d84:	4621      	mov	r1, r4
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7ff fd46 	bl	8001818 <SDMMC_GetCmdResp1>
}
 8001d8c:	b007      	add	sp, #28
 8001d8e:	bd30      	pop	{r4, r5, pc}

08001d90 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <disk_status+0x10>)
 8001d92:	181a      	adds	r2, r3, r0
 8001d94:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001d98:	7a10      	ldrb	r0, [r2, #8]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4718      	bx	r3
 8001da0:	20000054 	.word	0x20000054

08001da4 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <disk_initialize+0x1c>)
 8001da6:	5c1a      	ldrb	r2, [r3, r0]
 8001da8:	b942      	cbnz	r2, 8001dbc <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8001daa:	2201      	movs	r2, #1
 8001dac:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001dae:	181a      	adds	r2, r3, r0
 8001db0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001db4:	7a10      	ldrb	r0, [r2, #8]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4718      	bx	r3
  }
  return stat;
}
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	4770      	bx	lr
 8001dc0:	20000054 	.word	0x20000054

08001dc4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001dc4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001dc6:	4c05      	ldr	r4, [pc, #20]	; (8001ddc <disk_read+0x18>)
 8001dc8:	1825      	adds	r5, r4, r0
 8001dca:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001dce:	6860      	ldr	r0, [r4, #4]
 8001dd0:	6884      	ldr	r4, [r0, #8]
 8001dd2:	7a28      	ldrb	r0, [r5, #8]
 8001dd4:	46a4      	mov	ip, r4
  return res;
}
 8001dd6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001dd8:	4760      	bx	ip
 8001dda:	bf00      	nop
 8001ddc:	20000054 	.word	0x20000054

08001de0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001de0:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001de2:	4c05      	ldr	r4, [pc, #20]	; (8001df8 <disk_write+0x18>)
 8001de4:	1825      	adds	r5, r4, r0
 8001de6:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8001dea:	6860      	ldr	r0, [r4, #4]
 8001dec:	68c4      	ldr	r4, [r0, #12]
 8001dee:	7a28      	ldrb	r0, [r5, #8]
 8001df0:	46a4      	mov	ip, r4
  return res;
}
 8001df2:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001df4:	4760      	bx	ip
 8001df6:	bf00      	nop
 8001df8:	20000054 	.word	0x20000054

08001dfc <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <disk_ioctl+0x18>)
{
 8001dfe:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001e00:	181c      	adds	r4, r3, r0
 8001e02:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e06:	7a20      	ldrb	r0, [r4, #8]
 8001e08:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8001e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	4718      	bx	r3
 8001e12:	bf00      	nop
 8001e14:	20000054 	.word	0x20000054

08001e18 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8001e18:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8001e1a:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8001e1c:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8001e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8001e22:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001e26:	4770      	bx	lr

08001e28 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8001e28:	0a0b      	lsrs	r3, r1, #8
 8001e2a:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001e2c:	7043      	strb	r3, [r0, #1]
 8001e2e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8001e30:	0e09      	lsrs	r1, r1, #24
 8001e32:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8001e34:	70c1      	strb	r1, [r0, #3]
 8001e36:	4770      	bx	lr

08001e38 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001e38:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8001e3a:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8001e3e:	4290      	cmp	r0, r2
 8001e40:	d1fb      	bne.n	8001e3a <mem_set+0x2>
}
 8001e42:	4770      	bx	lr

08001e44 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <chk_lock+0x58>)
 8001e46:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001e48:	2500      	movs	r5, #0
 8001e4a:	462a      	mov	r2, r5
 8001e4c:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8001e4e:	681e      	ldr	r6, [r3, #0]
 8001e50:	b1a6      	cbz	r6, 8001e7c <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8001e52:	6807      	ldr	r7, [r0, #0]
 8001e54:	42be      	cmp	r6, r7
 8001e56:	d112      	bne.n	8001e7e <chk_lock+0x3a>
 8001e58:	685f      	ldr	r7, [r3, #4]
 8001e5a:	6886      	ldr	r6, [r0, #8]
 8001e5c:	42b7      	cmp	r7, r6
 8001e5e:	d10e      	bne.n	8001e7e <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8001e60:	689f      	ldr	r7, [r3, #8]
 8001e62:	6946      	ldr	r6, [r0, #20]
 8001e64:	42b7      	cmp	r7, r6
 8001e66:	d10a      	bne.n	8001e7e <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001e68:	b9b1      	cbnz	r1, 8001e98 <chk_lock+0x54>
 8001e6a:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8001e6e:	8993      	ldrh	r3, [r2, #12]
 8001e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e74:	bf14      	ite	ne
 8001e76:	2000      	movne	r0, #0
 8001e78:	2010      	moveq	r0, #16
 8001e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8001e7c:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001e7e:	3201      	adds	r2, #1
 8001e80:	2a02      	cmp	r2, #2
 8001e82:	f103 0310 	add.w	r3, r3, #16
 8001e86:	d1e2      	bne.n	8001e4e <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001e88:	b10d      	cbz	r5, 8001e8e <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001e8e:	2902      	cmp	r1, #2
 8001e90:	bf0c      	ite	eq
 8001e92:	2000      	moveq	r0, #0
 8001e94:	2012      	movne	r0, #18
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001e98:	2010      	movs	r0, #16
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e9c:	20000030 	.word	0x20000030

08001ea0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <inc_lock+0x74>)
 8001ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8001ea4:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 8001eaa:	6814      	ldr	r4, [r2, #0]
 8001eac:	42ac      	cmp	r4, r5
 8001eae:	d107      	bne.n	8001ec0 <inc_lock+0x20>
 8001eb0:	6857      	ldr	r7, [r2, #4]
 8001eb2:	6884      	ldr	r4, [r0, #8]
 8001eb4:	42a7      	cmp	r7, r4
 8001eb6:	d103      	bne.n	8001ec0 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8001eb8:	6897      	ldr	r7, [r2, #8]
 8001eba:	6944      	ldr	r4, [r0, #20]
 8001ebc:	42a7      	cmp	r7, r4
 8001ebe:	d01d      	beq.n	8001efc <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	f102 0210 	add.w	r2, r2, #16
 8001ec8:	d1ef      	bne.n	8001eaa <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001eca:	6833      	ldr	r3, [r6, #0]
 8001ecc:	b113      	cbz	r3, 8001ed4 <inc_lock+0x34>
 8001ece:	6933      	ldr	r3, [r6, #16]
 8001ed0:	b9eb      	cbnz	r3, 8001f0e <inc_lock+0x6e>
 8001ed2:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8001ed4:	011c      	lsls	r4, r3, #4
 8001ed6:	1932      	adds	r2, r6, r4
 8001ed8:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8001eda:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8001edc:	6940      	ldr	r0, [r0, #20]
 8001ede:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8001ee0:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8001ee2:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8001ee4:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001ee6:	b979      	cbnz	r1, 8001f08 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001ee8:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8001eec:	8992      	ldrh	r2, [r2, #12]
 8001eee:	3201      	adds	r2, #1
 8001ef0:	b292      	uxth	r2, r2
 8001ef2:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8001ef6:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001ef8:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001efc:	2900      	cmp	r1, #0
 8001efe:	d0f3      	beq.n	8001ee8 <inc_lock+0x48>
 8001f00:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8001f04:	8992      	ldrh	r2, [r2, #12]
 8001f06:	b912      	cbnz	r2, 8001f0e <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f0c:	e7f1      	b.n	8001ef2 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001f0e:	2000      	movs	r0, #0
 8001f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000030 	.word	0x20000030

08001f18 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001f18:	3801      	subs	r0, #1
 8001f1a:	2801      	cmp	r0, #1
 8001f1c:	d80e      	bhi.n	8001f3c <dec_lock+0x24>
		n = Files[i].ctr;
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <dec_lock+0x2c>)
 8001f20:	0103      	lsls	r3, r0, #4
 8001f22:	18d1      	adds	r1, r2, r3
 8001f24:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8001f26:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8001f2a:	b280      	uxth	r0, r0
 8001f2c:	b108      	cbz	r0, 8001f32 <dec_lock+0x1a>
 8001f2e:	1e48      	subs	r0, r1, #1
 8001f30:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8001f32:	18d1      	adds	r1, r2, r3
 8001f34:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001f36:	b918      	cbnz	r0, 8001f40 <dec_lock+0x28>
 8001f38:	50d0      	str	r0, [r2, r3]
 8001f3a:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	4770      	bx	lr
		res = FR_OK;
 8001f40:	2000      	movs	r0, #0
	}
	return res;
}
 8001f42:	4770      	bx	lr
 8001f44:	20000030 	.word	0x20000030

08001f48 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001f48:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 8001f4a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001f4c:	3b02      	subs	r3, #2
 8001f4e:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8001f50:	bf3d      	ittte	cc
 8001f52:	8943      	ldrhcc	r3, [r0, #10]
 8001f54:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 8001f56:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8001f5a:	2000      	movcs	r0, #0
}
 8001f5c:	4770      	bx	lr

08001f5e <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001f5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8001f60:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001f62:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8001f64:	0a49      	lsrs	r1, r1, #9
 8001f66:	8952      	ldrh	r2, [r2, #10]
 8001f68:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001f6c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001f6e:	b130      	cbz	r0, 8001f7e <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8001f70:	4281      	cmp	r1, r0
 8001f72:	d302      	bcc.n	8001f7a <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8001f74:	1a09      	subs	r1, r1, r0
 8001f76:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8001f78:	e7f8      	b.n	8001f6c <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8001f7a:	6858      	ldr	r0, [r3, #4]
 8001f7c:	4408      	add	r0, r1
}
 8001f7e:	4770      	bx	lr

08001f80 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001f80:	6802      	ldr	r2, [r0, #0]
{
 8001f82:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8001f84:	b152      	cbz	r2, 8001f9c <get_ldnumber+0x1c>
 8001f86:	4611      	mov	r1, r2
 8001f88:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f8e:	2c20      	cmp	r4, #32
 8001f90:	d90c      	bls.n	8001fac <get_ldnumber+0x2c>
 8001f92:	2c3a      	cmp	r4, #58	; 0x3a
 8001f94:	d1f8      	bne.n	8001f88 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8001f96:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d002      	beq.n	8001fa2 <get_ldnumber+0x22>
	int vol = -1;
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8001fa0:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	2a30      	cmp	r2, #48	; 0x30
 8001fa6:	d1f9      	bne.n	8001f9c <get_ldnumber+0x1c>
					*path = ++tt;
 8001fa8:	3301      	adds	r3, #1
 8001faa:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8001fac:	2000      	movs	r0, #0
 8001fae:	bd10      	pop	{r4, pc}

08001fb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8001fb0:	b538      	push	{r3, r4, r5, lr}
 8001fb2:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	b918      	cbnz	r0, 8001fc0 <validate+0x10>
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
 8001fb8:	2009      	movs	r0, #9
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001fba:	2300      	movs	r3, #0
 8001fbc:	602b      	str	r3, [r5, #0]
	return res;
}
 8001fbe:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001fc0:	6803      	ldr	r3, [r0, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f8      	beq.n	8001fb8 <validate+0x8>
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	2a00      	cmp	r2, #0
 8001fca:	d0f5      	beq.n	8001fb8 <validate+0x8>
 8001fcc:	8881      	ldrh	r1, [r0, #4]
 8001fce:	88da      	ldrh	r2, [r3, #6]
 8001fd0:	4291      	cmp	r1, r2
 8001fd2:	d1f1      	bne.n	8001fb8 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8001fd4:	7858      	ldrb	r0, [r3, #1]
 8001fd6:	f7ff fedb 	bl	8001d90 <disk_status>
 8001fda:	f010 0001 	ands.w	r0, r0, #1
 8001fde:	d1eb      	bne.n	8001fb8 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	e7eb      	b.n	8001fbc <validate+0xc>

08001fe4 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001fe4:	3801      	subs	r0, #1
 8001fe6:	440a      	add	r2, r1
			*d++ = *s++;
 8001fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fec:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8001ff0:	4291      	cmp	r1, r2
 8001ff2:	d1f9      	bne.n	8001fe8 <mem_cpy.part.0+0x4>
}
 8001ff4:	4770      	bx	lr

08001ff6 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8001ff6:	7eca      	ldrb	r2, [r1, #27]
 8001ff8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8001ffa:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8001ffc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8002000:	bf01      	itttt	eq
 8002002:	7d48      	ldrbeq	r0, [r1, #21]
 8002004:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002006:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800200a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 800200e:	4618      	mov	r0, r3
 8002010:	4770      	bx	lr

08002012 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8002012:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002016:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8002018:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800201a:	7803      	ldrb	r3, [r0, #0]
 800201c:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800201e:	bf01      	itttt	eq
 8002020:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8002022:	750a      	strbeq	r2, [r1, #20]
 8002024:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8002026:	754a      	strbeq	r2, [r1, #21]
 8002028:	4770      	bx	lr

0800202a <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800202a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 800202c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800202e:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8002032:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002034:	2301      	movs	r3, #1
 8002036:	462a      	mov	r2, r5
 8002038:	4639      	mov	r1, r7
 800203a:	7840      	ldrb	r0, [r0, #1]
 800203c:	f7ff fed0 	bl	8001de0 <disk_write>
 8002040:	b9a0      	cbnz	r0, 800206c <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002042:	6a23      	ldr	r3, [r4, #32]
 8002044:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 8002046:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002048:	1aeb      	subs	r3, r5, r3
 800204a:	4293      	cmp	r3, r2
 800204c:	d301      	bcc.n	8002052 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 800204e:	2000      	movs	r0, #0
 8002050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002052:	78a6      	ldrb	r6, [r4, #2]
 8002054:	2e01      	cmp	r6, #1
 8002056:	d9fa      	bls.n	800204e <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8002058:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 800205a:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 800205c:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800205e:	462a      	mov	r2, r5
 8002060:	2301      	movs	r3, #1
 8002062:	4639      	mov	r1, r7
 8002064:	f7ff febc 	bl	8001de0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002068:	3e01      	subs	r6, #1
 800206a:	e7f3      	b.n	8002054 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 800206c:	2001      	movs	r0, #1
}
 800206e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002070 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002070:	78c3      	ldrb	r3, [r0, #3]
 8002072:	b10b      	cbz	r3, 8002078 <sync_window+0x8>
 8002074:	f7ff bfd9 	b.w	800202a <sync_window.part.4>
}
 8002078:	4618      	mov	r0, r3
 800207a:	4770      	bx	lr

0800207c <sync_fs>:
{
 800207c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8002080:	f7ff fff6 	bl	8002070 <sync_window>
 8002084:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8002086:	2800      	cmp	r0, #0
 8002088:	d142      	bne.n	8002110 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800208a:	7823      	ldrb	r3, [r4, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d137      	bne.n	8002100 <sync_fs+0x84>
 8002090:	7927      	ldrb	r7, [r4, #4]
 8002092:	2f01      	cmp	r7, #1
 8002094:	d134      	bne.n	8002100 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8002096:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800209a:	4601      	mov	r1, r0
 800209c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a0:	4630      	mov	r0, r6
 80020a2:	f7ff fec9 	bl	8001e38 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80020a6:	2355      	movs	r3, #85	; 0x55
 80020a8:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 80020ac:	23aa      	movs	r3, #170	; 0xaa
 80020ae:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 80020b2:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80020b4:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80020b6:	2172      	movs	r1, #114	; 0x72
 80020b8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80020bc:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 80020c0:	2361      	movs	r3, #97	; 0x61
 80020c2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 80020c6:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 80020ca:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 80020ce:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 80020d2:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 80020d6:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80020da:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80020de:	6921      	ldr	r1, [r4, #16]
 80020e0:	f7ff fea2 	bl	8001e28 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80020e4:	68e1      	ldr	r1, [r4, #12]
 80020e6:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80020ea:	f7ff fe9d 	bl	8001e28 <st_dword>
			fs->winsect = fs->volbase + 1;
 80020ee:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80020f0:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80020f2:	3201      	adds	r2, #1
 80020f4:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80020f6:	463b      	mov	r3, r7
 80020f8:	4631      	mov	r1, r6
 80020fa:	f7ff fe71 	bl	8001de0 <disk_write>
			fs->fsi_flag = 0;
 80020fe:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002100:	2200      	movs	r2, #0
 8002102:	4611      	mov	r1, r2
 8002104:	7860      	ldrb	r0, [r4, #1]
 8002106:	f7ff fe79 	bl	8001dfc <disk_ioctl>
 800210a:	3000      	adds	r0, #0
 800210c:	bf18      	it	ne
 800210e:	2001      	movne	r0, #1
}
 8002110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002112 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002112:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002114:	428b      	cmp	r3, r1
{
 8002116:	b570      	push	{r4, r5, r6, lr}
 8002118:	4606      	mov	r6, r0
 800211a:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800211c:	d012      	beq.n	8002144 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 800211e:	f7ff ffa7 	bl	8002070 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002122:	4604      	mov	r4, r0
 8002124:	b960      	cbnz	r0, 8002140 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8002126:	462a      	mov	r2, r5
 8002128:	2301      	movs	r3, #1
 800212a:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800212e:	7870      	ldrb	r0, [r6, #1]
 8002130:	f7ff fe48 	bl	8001dc4 <disk_read>
 8002134:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8002136:	bf1c      	itt	ne
 8002138:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800213c:	2401      	movne	r4, #1
			fs->winsect = sector;
 800213e:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8002140:	4620      	mov	r0, r4
 8002142:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8002144:	2400      	movs	r4, #0
 8002146:	e7fb      	b.n	8002140 <move_window+0x2e>

08002148 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8002148:	2300      	movs	r3, #0
{
 800214a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800214c:	70c3      	strb	r3, [r0, #3]
 800214e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002152:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8002154:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8002156:	f7ff ffdc 	bl	8002112 <move_window>
 800215a:	bb30      	cbnz	r0, 80021aa <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 800215c:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8002160:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 8002164:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8002168:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800216c:	4293      	cmp	r3, r2
 800216e:	d11e      	bne.n	80021ae <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8002170:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002174:	2be9      	cmp	r3, #233	; 0xe9
 8002176:	d005      	beq.n	8002184 <check_fs+0x3c>
 8002178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <check_fs+0x74>)
 800217c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8002180:	4293      	cmp	r3, r2
 8002182:	d116      	bne.n	80021b2 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8002184:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8002188:	f7ff fe46 	bl	8001e18 <ld_dword>
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <check_fs+0x78>)
 800218e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002192:	4298      	cmp	r0, r3
 8002194:	d00f      	beq.n	80021b6 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8002196:	f104 0082 	add.w	r0, r4, #130	; 0x82
 800219a:	f7ff fe3d 	bl	8001e18 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <check_fs+0x7c>)
 80021a0:	4298      	cmp	r0, r3
 80021a2:	bf14      	ite	ne
 80021a4:	2002      	movne	r0, #2
 80021a6:	2000      	moveq	r0, #0
 80021a8:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80021aa:	2004      	movs	r0, #4
 80021ac:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80021ae:	2003      	movs	r0, #3
 80021b0:	bd10      	pop	{r4, pc}
	return 2;
 80021b2:	2002      	movs	r0, #2
 80021b4:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80021b6:	2000      	movs	r0, #0
}
 80021b8:	bd10      	pop	{r4, pc}
 80021ba:	bf00      	nop
 80021bc:	009000eb 	.word	0x009000eb
 80021c0:	00544146 	.word	0x00544146
 80021c4:	33544146 	.word	0x33544146

080021c8 <find_volume>:
{
 80021c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80021cc:	2300      	movs	r3, #0
{
 80021ce:	b085      	sub	sp, #20
	*rfs = 0;
 80021d0:	600b      	str	r3, [r1, #0]
{
 80021d2:	460f      	mov	r7, r1
 80021d4:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80021d6:	f7ff fed3 	bl	8001f80 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80021da:	1e06      	subs	r6, r0, #0
 80021dc:	f2c0 8140 	blt.w	8002460 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80021e0:	4ba3      	ldr	r3, [pc, #652]	; (8002470 <find_volume+0x2a8>)
 80021e2:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80021e6:	2c00      	cmp	r4, #0
 80021e8:	f000 813c 	beq.w	8002464 <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 80021ec:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80021ee:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80021f0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80021f4:	b173      	cbz	r3, 8002214 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80021f6:	7860      	ldrb	r0, [r4, #1]
 80021f8:	f7ff fdca 	bl	8001d90 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80021fc:	07c1      	lsls	r1, r0, #31
 80021fe:	d409      	bmi.n	8002214 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8002200:	2d00      	cmp	r5, #0
 8002202:	f000 8131 	beq.w	8002468 <find_volume+0x2a0>
 8002206:	f010 0004 	ands.w	r0, r0, #4
 800220a:	d000      	beq.n	800220e <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 800220c:	200a      	movs	r0, #10
}
 800220e:	b005      	add	sp, #20
 8002210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002214:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002216:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8002218:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800221a:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800221c:	f7ff fdc2 	bl	8001da4 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8002220:	07c2      	lsls	r2, r0, #31
 8002222:	f100 8123 	bmi.w	800246c <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8002226:	b10d      	cbz	r5, 800222c <find_volume+0x64>
 8002228:	0743      	lsls	r3, r0, #29
 800222a:	d4ef      	bmi.n	800220c <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800222c:	2100      	movs	r1, #0
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff8a 	bl	8002148 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8002234:	2802      	cmp	r0, #2
 8002236:	f040 80f7 	bne.w	8002428 <find_volume+0x260>
 800223a:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 800223e:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8002240:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 8002244:	b110      	cbz	r0, 800224c <find_volume+0x84>
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fde6 	bl	8001e18 <ld_dword>
 800224c:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8002250:	3101      	adds	r1, #1
 8002252:	2904      	cmp	r1, #4
 8002254:	f105 0510 	add.w	r5, r5, #16
 8002258:	d1f2      	bne.n	8002240 <find_volume+0x78>
 800225a:	2500      	movs	r5, #0
			bsect = br[i];
 800225c:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002260:	2e00      	cmp	r6, #0
 8002262:	f000 80d8 	beq.w	8002416 <find_volume+0x24e>
 8002266:	4631      	mov	r1, r6
 8002268:	4620      	mov	r0, r4
 800226a:	f7ff ff6d 	bl	8002148 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800226e:	2801      	cmp	r0, #1
 8002270:	f200 80d2 	bhi.w	8002418 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 8002274:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002278:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800227c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002284:	f040 80d4 	bne.w	8002430 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8002288:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 800228c:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8002290:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 8002294:	d104      	bne.n	80022a0 <find_volume+0xd8>
 8002296:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800229a:	f7ff fdbd 	bl	8001e18 <ld_dword>
 800229e:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022a0:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 80022a4:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022a6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80022aa:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80022ac:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80022b0:	f200 80be 	bhi.w	8002430 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80022b4:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 80022b8:	b2bb      	uxth	r3, r7
 80022ba:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80b7 	beq.w	8002430 <find_volume+0x268>
 80022c2:	1e7b      	subs	r3, r7, #1
 80022c4:	423b      	tst	r3, r7
 80022c6:	f040 80b3 	bne.w	8002430 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80022ca:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80022ce:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 80022d2:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80022d6:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80022da:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80022de:	f040 80a7 	bne.w	8002430 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80022e2:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80022e6:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80022ea:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80022ee:	d103      	bne.n	80022f8 <find_volume+0x130>
 80022f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80022f4:	f7ff fd90 	bl	8001e18 <ld_dword>
	rv = rv << 8 | ptr[0];
 80022f8:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80022fc:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8002300:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8002304:	f000 8094 	beq.w	8002430 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8002308:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800230c:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 8002310:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8002312:	4570      	cmp	r0, lr
 8002314:	f0c0 808c 	bcc.w	8002430 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8002318:	eba0 010e 	sub.w	r1, r0, lr
 800231c:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002320:	2900      	cmp	r1, #0
 8002322:	f000 8085 	beq.w	8002430 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8002326:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800232a:	4281      	cmp	r1, r0
 800232c:	f200 8084 	bhi.w	8002438 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8002330:	f640 77f5 	movw	r7, #4085	; 0xff5
 8002334:	42b9      	cmp	r1, r7
 8002336:	bf8c      	ite	hi
 8002338:	2702      	movhi	r7, #2
 800233a:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800233c:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800233e:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8002340:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 8002344:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8002346:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8002348:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800234a:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800234c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800234e:	d175      	bne.n	800243c <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8002350:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8002354:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8002358:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800235c:	d168      	bne.n	8002430 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800235e:	f1b8 0f00 	cmp.w	r8, #0
 8002362:	d165      	bne.n	8002430 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8002364:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002368:	f7ff fd56 	bl	8001e18 <ld_dword>
 800236c:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800236e:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8002370:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8002374:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8002378:	d35a      	bcc.n	8002430 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800237a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800237e:	6123      	str	r3, [r4, #16]
 8002380:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8002382:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 8002384:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002388:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800238a:	d12f      	bne.n	80023ec <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800238c:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8002390:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8002394:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8002398:	2b01      	cmp	r3, #1
 800239a:	d127      	bne.n	80023ec <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 800239c:	1c71      	adds	r1, r6, #1
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff feb7 	bl	8002112 <move_window>
 80023a4:	bb10      	cbnz	r0, 80023ec <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 80023a6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80023aa:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 80023ae:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 80023b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80023b4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d117      	bne.n	80023ec <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80023bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80023c0:	f7ff fd2a 	bl	8001e18 <ld_dword>
 80023c4:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <find_volume+0x2ac>)
 80023c6:	4298      	cmp	r0, r3
 80023c8:	d110      	bne.n	80023ec <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80023ca:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80023ce:	f7ff fd23 	bl	8001e18 <ld_dword>
 80023d2:	4b29      	ldr	r3, [pc, #164]	; (8002478 <find_volume+0x2b0>)
 80023d4:	4298      	cmp	r0, r3
 80023d6:	d109      	bne.n	80023ec <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80023d8:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80023dc:	f7ff fd1c 	bl	8001e18 <ld_dword>
 80023e0:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80023e2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80023e6:	f7ff fd17 	bl	8001e18 <ld_dword>
 80023ea:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80023ec:	4a23      	ldr	r2, [pc, #140]	; (800247c <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80023ee:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80023f0:	8813      	ldrh	r3, [r2, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8013      	strh	r3, [r2, #0]
 80023f8:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <find_volume+0x2b8>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4294      	cmp	r4, r2
 8002400:	bf04      	itt	eq
 8002402:	2200      	moveq	r2, #0
 8002404:	601a      	streq	r2, [r3, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	4294      	cmp	r4, r2
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f47f aefe 	bne.w	800220e <find_volume+0x46>
 8002412:	6118      	str	r0, [r3, #16]
 8002414:	e6fb      	b.n	800220e <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8002416:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8002418:	3501      	adds	r5, #1
 800241a:	2d04      	cmp	r5, #4
 800241c:	f47f af1e 	bne.w	800225c <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002420:	2804      	cmp	r0, #4
 8002422:	d105      	bne.n	8002430 <find_volume+0x268>
 8002424:	2001      	movs	r0, #1
 8002426:	e6f2      	b.n	800220e <find_volume+0x46>
 8002428:	2804      	cmp	r0, #4
 800242a:	d0fb      	beq.n	8002424 <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800242c:	2801      	cmp	r0, #1
 800242e:	d901      	bls.n	8002434 <find_volume+0x26c>
 8002430:	200d      	movs	r0, #13
 8002432:	e6ec      	b.n	800220e <find_volume+0x46>
	bsect = 0;
 8002434:	2600      	movs	r6, #0
 8002436:	e71d      	b.n	8002274 <find_volume+0xac>
		fmt = FS_FAT32;
 8002438:	2703      	movs	r7, #3
 800243a:	e77f      	b.n	800233c <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800243c:	f1b8 0f00 	cmp.w	r8, #0
 8002440:	d0f6      	beq.n	8002430 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002442:	2f02      	cmp	r7, #2
 8002444:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8002448:	bf18      	it	ne
 800244a:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800244c:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800244e:	bf18      	it	ne
 8002450:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8002454:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002456:	bf0c      	ite	eq
 8002458:	4601      	moveq	r1, r0
 800245a:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800245e:	e787      	b.n	8002370 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002460:	200b      	movs	r0, #11
 8002462:	e6d4      	b.n	800220e <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002464:	200c      	movs	r0, #12
 8002466:	e6d2      	b.n	800220e <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8002468:	4628      	mov	r0, r5
 800246a:	e6d0      	b.n	800220e <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800246c:	2003      	movs	r0, #3
 800246e:	e6ce      	b.n	800220e <find_volume+0x46>
 8002470:	2000002c 	.word	0x2000002c
 8002474:	41615252 	.word	0x41615252
 8002478:	61417272 	.word	0x61417272
 800247c:	20000050 	.word	0x20000050
 8002480:	20000030 	.word	0x20000030

08002484 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002484:	2901      	cmp	r1, #1
{
 8002486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800248a:	4605      	mov	r5, r0
 800248c:	460c      	mov	r4, r1
 800248e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002490:	d972      	bls.n	8002578 <put_fat+0xf4>
 8002492:	6943      	ldr	r3, [r0, #20]
 8002494:	4299      	cmp	r1, r3
 8002496:	d26f      	bcs.n	8002578 <put_fat+0xf4>
		switch (fs->fs_type) {
 8002498:	7803      	ldrb	r3, [r0, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d03f      	beq.n	800251e <put_fat+0x9a>
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d050      	beq.n	8002544 <put_fat+0xc0>
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d168      	bne.n	8002578 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 80024a6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024aa:	6a01      	ldr	r1, [r0, #32]
 80024ac:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 80024b0:	f7ff fe2f 	bl	8002112 <move_window>
 80024b4:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 80024b6:	bb38      	cbnz	r0, 8002508 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 80024b8:	f105 0930 	add.w	r9, r5, #48	; 0x30
 80024bc:	f108 0a01 	add.w	sl, r8, #1
 80024c0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80024c4:	f014 0401 	ands.w	r4, r4, #1
 80024c8:	bf1f      	itttt	ne
 80024ca:	f819 3008 	ldrbne.w	r3, [r9, r8]
 80024ce:	f003 020f 	andne.w	r2, r3, #15
 80024d2:	013b      	lslne	r3, r7, #4
 80024d4:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80024d8:	bf14      	ite	ne
 80024da:	4313      	orrne	r3, r2
 80024dc:	b2fb      	uxtbeq	r3, r7
 80024de:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024e2:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024e8:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 80024ec:	4628      	mov	r0, r5
 80024ee:	f7ff fe10 	bl	8002112 <move_window>
			if (res != FR_OK) break;
 80024f2:	4606      	mov	r6, r0
 80024f4:	b940      	cbnz	r0, 8002508 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 80024f6:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80024fa:	b144      	cbz	r4, 800250e <put_fat+0x8a>
 80024fc:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8002500:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8002504:	2301      	movs	r3, #1
 8002506:	70eb      	strb	r3, [r5, #3]
}
 8002508:	4630      	mov	r0, r6
 800250a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800250e:	f819 300a 	ldrb.w	r3, [r9, sl]
 8002512:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8002516:	f023 030f 	bic.w	r3, r3, #15
 800251a:	431f      	orrs	r7, r3
 800251c:	e7f0      	b.n	8002500 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800251e:	6a01      	ldr	r1, [r0, #32]
 8002520:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8002524:	f7ff fdf5 	bl	8002112 <move_window>
			if (res != FR_OK) break;
 8002528:	4606      	mov	r6, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d1ec      	bne.n	8002508 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800252e:	0064      	lsls	r4, r4, #1
 8002530:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002534:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8002538:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800253a:	551f      	strb	r7, [r3, r4]
 800253c:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8002540:	7057      	strb	r7, [r2, #1]
 8002542:	e7df      	b.n	8002504 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002544:	6a01      	ldr	r1, [r0, #32]
 8002546:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800254a:	f7ff fde2 	bl	8002112 <move_window>
			if (res != FR_OK) break;
 800254e:	4606      	mov	r6, r0
 8002550:	2800      	cmp	r0, #0
 8002552:	d1d9      	bne.n	8002508 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002554:	00a4      	lsls	r4, r4, #2
 8002556:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800255a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800255e:	441c      	add	r4, r3
 8002560:	4620      	mov	r0, r4
 8002562:	f7ff fc59 	bl	8001e18 <ld_dword>
 8002566:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 800256a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800256e:	4339      	orrs	r1, r7
 8002570:	4620      	mov	r0, r4
 8002572:	f7ff fc59 	bl	8001e28 <st_dword>
 8002576:	e7c5      	b.n	8002504 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8002578:	2602      	movs	r6, #2
 800257a:	e7c5      	b.n	8002508 <put_fat+0x84>

0800257c <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800257c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800257e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002580:	4605      	mov	r5, r0
 8002582:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002584:	d952      	bls.n	800262c <get_fat.isra.8+0xb0>
 8002586:	6943      	ldr	r3, [r0, #20]
 8002588:	4299      	cmp	r1, r3
 800258a:	d24f      	bcs.n	800262c <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 800258c:	7803      	ldrb	r3, [r0, #0]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d029      	beq.n	80025e6 <get_fat.isra.8+0x6a>
 8002592:	2b03      	cmp	r3, #3
 8002594:	d038      	beq.n	8002608 <get_fat.isra.8+0x8c>
 8002596:	2b01      	cmp	r3, #1
 8002598:	d148      	bne.n	800262c <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 800259a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800259e:	6a01      	ldr	r1, [r0, #32]
 80025a0:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 80025a4:	f7ff fdb5 	bl	8002112 <move_window>
 80025a8:	b110      	cbz	r0, 80025b0 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80025b0:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80025b2:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 80025b4:	f3c6 0608 	ubfx	r6, r6, #0, #9
 80025b8:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80025ba:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80025be:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 80025c0:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80025c4:	f7ff fda5 	bl	8002112 <move_window>
 80025c8:	2800      	cmp	r0, #0
 80025ca:	d1ee      	bne.n	80025aa <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80025cc:	f3c7 0708 	ubfx	r7, r7, #0, #9
 80025d0:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80025d2:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80025d4:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 80025d8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80025dc:	bf4c      	ite	mi
 80025de:	0900      	lsrmi	r0, r0, #4
 80025e0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80025e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80025e6:	6a01      	ldr	r1, [r0, #32]
 80025e8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80025ec:	f7ff fd91 	bl	8002112 <move_window>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	d1da      	bne.n	80025aa <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80025f4:	0064      	lsls	r4, r4, #1
 80025f6:	3530      	adds	r5, #48	; 0x30
 80025f8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80025fc:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 80025fe:	5d28      	ldrb	r0, [r5, r4]
 8002600:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8002602:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002608:	6a01      	ldr	r1, [r0, #32]
 800260a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800260e:	f7ff fd80 	bl	8002112 <move_window>
 8002612:	2800      	cmp	r0, #0
 8002614:	d1c9      	bne.n	80025aa <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8002616:	00a4      	lsls	r4, r4, #2
 8002618:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800261c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8002620:	4420      	add	r0, r4
 8002622:	f7ff fbf9 	bl	8001e18 <ld_dword>
 8002626:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 800262c:	2001      	movs	r0, #1
}
 800262e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002630 <create_chain>:
{
 8002630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002634:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8002636:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8002638:	460f      	mov	r7, r1
 800263a:	b971      	cbnz	r1, 800265a <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800263c:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800263e:	b1f6      	cbz	r6, 800267e <create_chain+0x4e>
 8002640:	696b      	ldr	r3, [r5, #20]
 8002642:	429e      	cmp	r6, r3
 8002644:	bf28      	it	cs
 8002646:	2601      	movcs	r6, #1
 8002648:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800264a:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 800264c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800264e:	429c      	cmp	r4, r3
 8002650:	d318      	bcc.n	8002684 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8002652:	2e01      	cmp	r6, #1
 8002654:	d815      	bhi.n	8002682 <create_chain+0x52>
 8002656:	2400      	movs	r4, #0
 8002658:	e009      	b.n	800266e <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800265a:	4628      	mov	r0, r5
 800265c:	f7ff ff8e 	bl	800257c <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002660:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002662:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8002664:	d937      	bls.n	80026d6 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8002666:	1c43      	adds	r3, r0, #1
 8002668:	d104      	bne.n	8002674 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800266a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800266e:	4620      	mov	r0, r4
 8002670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002674:	696b      	ldr	r3, [r5, #20]
 8002676:	4298      	cmp	r0, r3
 8002678:	d3f9      	bcc.n	800266e <create_chain+0x3e>
 800267a:	463e      	mov	r6, r7
 800267c:	e7e4      	b.n	8002648 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800267e:	2601      	movs	r6, #1
 8002680:	e7e2      	b.n	8002648 <create_chain+0x18>
				ncl = 2;
 8002682:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002684:	4621      	mov	r1, r4
 8002686:	f8d8 0000 	ldr.w	r0, [r8]
 800268a:	f7ff ff77 	bl	800257c <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 800268e:	b130      	cbz	r0, 800269e <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8002690:	2801      	cmp	r0, #1
 8002692:	d020      	beq.n	80026d6 <create_chain+0xa6>
 8002694:	3001      	adds	r0, #1
 8002696:	d0e8      	beq.n	800266a <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8002698:	42b4      	cmp	r4, r6
 800269a:	d1d6      	bne.n	800264a <create_chain+0x1a>
 800269c:	e7db      	b.n	8002656 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800269e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a2:	4621      	mov	r1, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f7ff feed 	bl	8002484 <put_fat>
		if (res == FR_OK && clst != 0) {
 80026aa:	b990      	cbnz	r0, 80026d2 <create_chain+0xa2>
 80026ac:	b957      	cbnz	r7, 80026c4 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80026ae:	696a      	ldr	r2, [r5, #20]
 80026b0:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 80026b2:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80026b4:	3a02      	subs	r2, #2
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d90f      	bls.n	80026da <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80026ba:	792b      	ldrb	r3, [r5, #4]
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	712b      	strb	r3, [r5, #4]
 80026c2:	e7d4      	b.n	800266e <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80026c4:	4622      	mov	r2, r4
 80026c6:	4639      	mov	r1, r7
 80026c8:	4628      	mov	r0, r5
 80026ca:	f7ff fedb 	bl	8002484 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d0ed      	beq.n	80026ae <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80026d2:	2801      	cmp	r0, #1
 80026d4:	d0c9      	beq.n	800266a <create_chain+0x3a>
 80026d6:	2401      	movs	r4, #1
 80026d8:	e7c9      	b.n	800266e <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80026da:	3b01      	subs	r3, #1
 80026dc:	612b      	str	r3, [r5, #16]
 80026de:	e7ec      	b.n	80026ba <create_chain+0x8a>

080026e0 <remove_chain>:
{
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80026e4:	2d01      	cmp	r5, #1
{
 80026e6:	4607      	mov	r7, r0
 80026e8:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80026ea:	d801      	bhi.n	80026f0 <remove_chain+0x10>
 80026ec:	2002      	movs	r0, #2
 80026ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80026f0:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80026f2:	6963      	ldr	r3, [r4, #20]
 80026f4:	429d      	cmp	r5, r3
 80026f6:	d2f9      	bcs.n	80026ec <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80026f8:	b12a      	cbz	r2, 8002706 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80026fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff fec0 	bl	8002484 <put_fat>
		if (res != FR_OK) return res;
 8002704:	bb08      	cbnz	r0, 800274a <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002706:	4629      	mov	r1, r5
 8002708:	6838      	ldr	r0, [r7, #0]
 800270a:	f7ff ff37 	bl	800257c <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 800270e:	4606      	mov	r6, r0
 8002710:	b908      	cbnz	r0, 8002716 <remove_chain+0x36>
	return FR_OK;
 8002712:	2000      	movs	r0, #0
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002716:	2801      	cmp	r0, #1
 8002718:	d0e8      	beq.n	80026ec <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800271a:	1c43      	adds	r3, r0, #1
 800271c:	d014      	beq.n	8002748 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800271e:	2200      	movs	r2, #0
 8002720:	4629      	mov	r1, r5
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff feae 	bl	8002484 <put_fat>
			if (res != FR_OK) return res;
 8002728:	b978      	cbnz	r0, 800274a <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800272a:	6962      	ldr	r2, [r4, #20]
 800272c:	6923      	ldr	r3, [r4, #16]
 800272e:	1e91      	subs	r1, r2, #2
 8002730:	428b      	cmp	r3, r1
 8002732:	d205      	bcs.n	8002740 <remove_chain+0x60>
			fs->free_clst++;
 8002734:	3301      	adds	r3, #1
 8002736:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8002738:	7923      	ldrb	r3, [r4, #4]
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002740:	4296      	cmp	r6, r2
 8002742:	4635      	mov	r5, r6
 8002744:	d3df      	bcc.n	8002706 <remove_chain+0x26>
 8002746:	e7e4      	b.n	8002712 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002748:	2001      	movs	r0, #1
}
 800274a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800274c <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800274c:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800274e:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8002750:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8002752:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8002754:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8002756:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002758:	b992      	cbnz	r2, 8002780 <dir_sdi.constprop.11+0x34>
 800275a:	7823      	ldrb	r3, [r4, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8002760:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002762:	b973      	cbnz	r3, 8002782 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8002764:	8923      	ldrh	r3, [r4, #8]
 8002766:	b90b      	cbnz	r3, 800276c <dir_sdi.constprop.11+0x20>
 8002768:	2002      	movs	r0, #2
 800276a:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 800276c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276e:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8002770:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8002772:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f7      	beq.n	8002768 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002778:	3430      	adds	r4, #48	; 0x30
 800277a:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800277c:	2000      	movs	r0, #0
 800277e:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002780:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002782:	8961      	ldrh	r1, [r4, #10]
 8002784:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8002786:	b961      	cbnz	r1, 80027a2 <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002788:	4611      	mov	r1, r2
 800278a:	6828      	ldr	r0, [r5, #0]
 800278c:	f7ff fef6 	bl	800257c <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002790:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002792:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002794:	d00b      	beq.n	80027ae <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002796:	2801      	cmp	r0, #1
 8002798:	d9e6      	bls.n	8002768 <dir_sdi.constprop.11+0x1c>
 800279a:	6963      	ldr	r3, [r4, #20]
 800279c:	4298      	cmp	r0, r3
 800279e:	d3f3      	bcc.n	8002788 <dir_sdi.constprop.11+0x3c>
 80027a0:	e7e2      	b.n	8002768 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 80027a2:	4619      	mov	r1, r3
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff fbcf 	bl	8001f48 <clust2sect>
 80027aa:	61e8      	str	r0, [r5, #28]
 80027ac:	e7e0      	b.n	8002770 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80027ae:	2001      	movs	r0, #1
}
 80027b0:	bd38      	pop	{r3, r4, r5, pc}

080027b2 <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80027b2:	69c3      	ldr	r3, [r0, #28]
{
 80027b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	4605      	mov	r5, r0
 80027ba:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80027bc:	b1ab      	cbz	r3, 80027ea <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80027be:	6942      	ldr	r2, [r0, #20]
 80027c0:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80027c4:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 80027c8:	d20f      	bcs.n	80027ea <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80027ca:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 80027ce:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80027d0:	f1b9 0f00 	cmp.w	r9, #0
 80027d4:	d14f      	bne.n	8002876 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 80027d6:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 80027d8:	3301      	adds	r3, #1
 80027da:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 80027dc:	b941      	cbnz	r1, 80027f0 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80027de:	8923      	ldrh	r3, [r4, #8]
 80027e0:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 80027e4:	d847      	bhi.n	8002876 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80027ea:	2004      	movs	r0, #4
 80027ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80027f0:	8963      	ldrh	r3, [r4, #10]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 80027f8:	d13d      	bne.n	8002876 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff febe 	bl	800257c <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002800:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8002802:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8002804:	d802      	bhi.n	800280c <dir_next+0x5a>
 8002806:	2002      	movs	r0, #2
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800280c:	1c42      	adds	r2, r0, #1
 800280e:	d102      	bne.n	8002816 <dir_next+0x64>
 8002810:	2001      	movs	r0, #1
 8002812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8002816:	6963      	ldr	r3, [r4, #20]
 8002818:	4298      	cmp	r0, r3
 800281a:	d326      	bcc.n	800286a <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 800281c:	2f00      	cmp	r7, #0
 800281e:	d0e2      	beq.n	80027e6 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002820:	69a9      	ldr	r1, [r5, #24]
 8002822:	4628      	mov	r0, r5
 8002824:	f7ff ff04 	bl	8002630 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002828:	4606      	mov	r6, r0
 800282a:	2800      	cmp	r0, #0
 800282c:	d037      	beq.n	800289e <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800282e:	2801      	cmp	r0, #1
 8002830:	d0e9      	beq.n	8002806 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002832:	1c43      	adds	r3, r0, #1
 8002834:	d0ec      	beq.n	8002810 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fc1a 	bl	8002070 <sync_window>
 800283c:	4607      	mov	r7, r0
 800283e:	2800      	cmp	r0, #0
 8002840:	d1e6      	bne.n	8002810 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8002842:	4601      	mov	r1, r0
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800284c:	f7ff faf4 	bl	8001e38 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002850:	4631      	mov	r1, r6
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fb78 	bl	8001f48 <clust2sect>
						fs->wflag = 1;
 8002858:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800285c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800285e:	8963      	ldrh	r3, [r4, #10]
 8002860:	429f      	cmp	r7, r3
 8002862:	d310      	bcc.n	8002886 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8002864:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002866:	1bdf      	subs	r7, r3, r7
 8002868:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 800286a:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800286c:	4631      	mov	r1, r6
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fb6a 	bl	8001f48 <clust2sect>
 8002874:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002876:	3430      	adds	r4, #48	; 0x30
 8002878:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 800287a:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800287e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8002880:	2000      	movs	r0, #0
 8002882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8002886:	f884 a003 	strb.w	sl, [r4, #3]
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff fbcd 	bl	800202a <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8002890:	2800      	cmp	r0, #0
 8002892:	d1bd      	bne.n	8002810 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8002894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002896:	3301      	adds	r3, #1
 8002898:	3701      	adds	r7, #1
 800289a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800289c:	e7df      	b.n	800285e <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800289e:	2007      	movs	r0, #7
}
 80028a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028a4 <follow_path>:
{
 80028a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80028a8:	6807      	ldr	r7, [r0, #0]
{
 80028aa:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80028ac:	780b      	ldrb	r3, [r1, #0]
 80028ae:	2b2f      	cmp	r3, #47	; 0x2f
 80028b0:	460d      	mov	r5, r1
 80028b2:	f101 0101 	add.w	r1, r1, #1
 80028b6:	d0f9      	beq.n	80028ac <follow_path+0x8>
 80028b8:	2b5c      	cmp	r3, #92	; 0x5c
 80028ba:	d0f7      	beq.n	80028ac <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80028bc:	2300      	movs	r3, #0
 80028be:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80028c0:	782b      	ldrb	r3, [r5, #0]
 80028c2:	2b1f      	cmp	r3, #31
 80028c4:	d959      	bls.n	800297a <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80028c6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002a24 <follow_path+0x180>
	p = *path; sfn = dp->fn;
 80028ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80028ce:	220b      	movs	r2, #11
 80028d0:	2120      	movs	r1, #32
 80028d2:	4630      	mov	r0, r6
 80028d4:	f7ff fab0 	bl	8001e38 <mem_set>
	si = i = 0; ni = 8;
 80028d8:	2200      	movs	r2, #0
 80028da:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 80028de:	4611      	mov	r1, r2
 80028e0:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80028e2:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80028e6:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80028e8:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80028ec:	d90b      	bls.n	8002906 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80028ee:	2b2f      	cmp	r3, #47	; 0x2f
 80028f0:	d14b      	bne.n	800298a <follow_path+0xe6>
 80028f2:	1868      	adds	r0, r5, r1
 80028f4:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80028f6:	f810 eb01 	ldrb.w	lr, [r0], #1
 80028fa:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 80028fe:	d0f9      	beq.n	80028f4 <follow_path+0x50>
 8002900:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8002904:	d0f6      	beq.n	80028f4 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8002906:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8002908:	2a00      	cmp	r2, #0
 800290a:	d054      	beq.n	80029b6 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800290c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8002910:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8002914:	2ae5      	cmp	r2, #229	; 0xe5
 8002916:	bf04      	itt	eq
 8002918:	2205      	moveq	r2, #5
 800291a:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800291e:	2b21      	cmp	r3, #33	; 0x21
 8002920:	bf34      	ite	cc
 8002922:	2304      	movcc	r3, #4
 8002924:	2300      	movcs	r3, #0
 8002926:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff ff0e 	bl	800274c <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8002930:	2800      	cmp	r0, #0
 8002932:	d145      	bne.n	80029c0 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8002934:	69e1      	ldr	r1, [r4, #28]
 8002936:	4648      	mov	r0, r9
 8002938:	f7ff fbeb 	bl	8002112 <move_window>
		if (res != FR_OK) break;
 800293c:	2800      	cmp	r0, #0
 800293e:	d13f      	bne.n	80029c0 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8002940:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8002942:	781a      	ldrb	r2, [r3, #0]
 8002944:	2a00      	cmp	r2, #0
 8002946:	d046      	beq.n	80029d6 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8002948:	7ada      	ldrb	r2, [r3, #11]
 800294a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800294e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8002950:	7ada      	ldrb	r2, [r3, #11]
 8002952:	0711      	lsls	r1, r2, #28
 8002954:	d40c      	bmi.n	8002970 <follow_path+0xcc>
 8002956:	f103 0e0b 	add.w	lr, r3, #11
 800295a:	4631      	mov	r1, r6
		r = *d++ - *s++;
 800295c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002960:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8002964:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8002966:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 800296a:	d027      	beq.n	80029bc <follow_path+0x118>
 800296c:	2a00      	cmp	r2, #0
 800296e:	d0f5      	beq.n	800295c <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8002970:	2100      	movs	r1, #0
 8002972:	4620      	mov	r0, r4
 8002974:	f7ff ff1d 	bl	80027b2 <dir_next>
 8002978:	e7da      	b.n	8002930 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8002980:	4620      	mov	r0, r4
}
 8002982:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8002986:	f7ff bee1 	b.w	800274c <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800298a:	2b5c      	cmp	r3, #92	; 0x5c
 800298c:	d0b1      	beq.n	80028f2 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800298e:	2b2e      	cmp	r3, #46	; 0x2e
 8002990:	d036      	beq.n	8002a00 <follow_path+0x15c>
 8002992:	4290      	cmp	r0, r2
 8002994:	d90f      	bls.n	80029b6 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8002996:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800299a:	bf18      	it	ne
 800299c:	3b80      	subne	r3, #128	; 0x80
 800299e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8002a28 <follow_path+0x184>
 80029a2:	bf18      	it	ne
 80029a4:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80029a8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80029ac:	f1bc 0f00 	cmp.w	ip, #0
 80029b0:	d02b      	beq.n	8002a0a <follow_path+0x166>
 80029b2:	4563      	cmp	r3, ip
 80029b4:	d1f8      	bne.n	80029a8 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80029b6:	2006      	movs	r0, #6
	return res;
 80029b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d1d7      	bne.n	8002970 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 80029c0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80029c4:	b148      	cbz	r0, 80029da <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80029c6:	2804      	cmp	r0, #4
 80029c8:	d129      	bne.n	8002a1e <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80029ca:	f013 0f04 	tst.w	r3, #4
 80029ce:	bf08      	it	eq
 80029d0:	2005      	moveq	r0, #5
 80029d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80029d6:	2004      	movs	r0, #4
 80029d8:	e7f2      	b.n	80029c0 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80029da:	075a      	lsls	r2, r3, #29
 80029dc:	d41f      	bmi.n	8002a1e <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80029de:	79a3      	ldrb	r3, [r4, #6]
 80029e0:	06db      	lsls	r3, r3, #27
 80029e2:	d50a      	bpl.n	80029fa <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80029e4:	6963      	ldr	r3, [r4, #20]
 80029e6:	7838      	ldrb	r0, [r7, #0]
 80029e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ec:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80029f0:	4419      	add	r1, r3
 80029f2:	f7ff fb00 	bl	8001ff6 <ld_clust.isra.1>
 80029f6:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80029f8:	e767      	b.n	80028ca <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80029fa:	2005      	movs	r0, #5
 80029fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8002a00:	280b      	cmp	r0, #11
 8002a02:	d0d8      	beq.n	80029b6 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8002a04:	2208      	movs	r2, #8
 8002a06:	200b      	movs	r0, #11
 8002a08:	e76b      	b.n	80028e2 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8002a0a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8002a0e:	f1bc 0f19 	cmp.w	ip, #25
 8002a12:	d801      	bhi.n	8002a18 <follow_path+0x174>
 8002a14:	3b20      	subs	r3, #32
 8002a16:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8002a18:	54b3      	strb	r3, [r6, r2]
 8002a1a:	3201      	adds	r2, #1
 8002a1c:	e761      	b.n	80028e2 <follow_path+0x3e>
}
 8002a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a22:	bf00      	nop
 8002a24:	08003575 	.word	0x08003575
 8002a28:	080035f4 	.word	0x080035f4

08002a2c <dir_register>:
{
 8002a2c:	b570      	push	{r4, r5, r6, lr}
 8002a2e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8002a30:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8002a32:	f7ff fe8b 	bl	800274c <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8002a36:	4604      	mov	r4, r0
 8002a38:	bb28      	cbnz	r0, 8002a86 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8002a3a:	69e9      	ldr	r1, [r5, #28]
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f7ff fb68 	bl	8002112 <move_window>
			if (res != FR_OK) break;
 8002a42:	4604      	mov	r4, r0
 8002a44:	b9f8      	cbnz	r0, 8002a86 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002a46:	6a2b      	ldr	r3, [r5, #32]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2be5      	cmp	r3, #229	; 0xe5
 8002a4c:	d114      	bne.n	8002a78 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8002a4e:	69e9      	ldr	r1, [r5, #28]
 8002a50:	4630      	mov	r0, r6
 8002a52:	f7ff fb5e 	bl	8002112 <move_window>
		if (res == FR_OK) {
 8002a56:	4604      	mov	r4, r0
 8002a58:	b960      	cbnz	r0, 8002a74 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8002a5a:	4601      	mov	r1, r0
 8002a5c:	2220      	movs	r2, #32
 8002a5e:	6a28      	ldr	r0, [r5, #32]
 8002a60:	f7ff f9ea 	bl	8001e38 <mem_set>
 8002a64:	220b      	movs	r2, #11
 8002a66:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8002a6a:	6a28      	ldr	r0, [r5, #32]
 8002a6c:	f7ff faba 	bl	8001fe4 <mem_cpy.part.0>
			fs->wflag = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	70f3      	strb	r3, [r6, #3]
}
 8002a74:	4620      	mov	r0, r4
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0e8      	beq.n	8002a4e <dir_register+0x22>
			res = dir_next(dp, 1);
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4628      	mov	r0, r5
 8002a80:	f7ff fe97 	bl	80027b2 <dir_next>
 8002a84:	e7d7      	b.n	8002a36 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002a86:	2c04      	cmp	r4, #4
 8002a88:	bf08      	it	eq
 8002a8a:	2407      	moveq	r4, #7
 8002a8c:	e7f2      	b.n	8002a74 <dir_register+0x48>
	...

08002a90 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002a90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002a92:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8002a94:	a804      	add	r0, sp, #16
{
 8002a96:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8002a98:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8002a9c:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8002a9e:	f7ff fa6f 	bl	8001f80 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002aa2:	1e05      	subs	r5, r0, #0
 8002aa4:	db1f      	blt.n	8002ae6 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002aa6:	4912      	ldr	r1, [pc, #72]	; (8002af0 <f_mount+0x60>)
 8002aa8:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8002aac:	b15c      	cbz	r4, 8002ac6 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <f_mount+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4294      	cmp	r4, r2
 8002ab4:	bf04      	itt	eq
 8002ab6:	2200      	moveq	r2, #0
 8002ab8:	601a      	streq	r2, [r3, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	2000      	movs	r0, #0
 8002abe:	4294      	cmp	r4, r2
 8002ac0:	bf08      	it	eq
 8002ac2:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002ac4:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8002ac6:	9801      	ldr	r0, [sp, #4]
 8002ac8:	b108      	cbz	r0, 8002ace <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8002aca:	2300      	movs	r3, #0
 8002acc:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002ace:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002ad2:	b130      	cbz	r0, 8002ae2 <f_mount+0x52>
 8002ad4:	2e01      	cmp	r6, #1
 8002ad6:	d108      	bne.n	8002aea <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8002ad8:	2200      	movs	r2, #0
 8002ada:	a901      	add	r1, sp, #4
 8002adc:	4668      	mov	r0, sp
 8002ade:	f7ff fb73 	bl	80021c8 <find_volume>
	LEAVE_FF(fs, res);
}
 8002ae2:	b004      	add	sp, #16
 8002ae4:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8002ae6:	200b      	movs	r0, #11
 8002ae8:	e7fb      	b.n	8002ae2 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002aea:	2000      	movs	r0, #0
 8002aec:	e7f9      	b.n	8002ae2 <f_mount+0x52>
 8002aee:	bf00      	nop
 8002af0:	2000002c 	.word	0x2000002c
 8002af4:	20000030 	.word	0x20000030

08002af8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8002af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002afc:	b090      	sub	sp, #64	; 0x40
 8002afe:	4690      	mov	r8, r2
 8002b00:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8002b02:	4604      	mov	r4, r0
 8002b04:	2800      	cmp	r0, #0
 8002b06:	f000 80ce 	beq.w	8002ca6 <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8002b0a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8002b0e:	462a      	mov	r2, r5
 8002b10:	a903      	add	r1, sp, #12
 8002b12:	a801      	add	r0, sp, #4
 8002b14:	f7ff fb58 	bl	80021c8 <find_volume>
	if (res == FR_OK) {
 8002b18:	4607      	mov	r7, r0
 8002b1a:	bb38      	cbnz	r0, 8002b6c <f_open+0x74>
		dj.obj.fs = fs;
 8002b1c:	ae10      	add	r6, sp, #64	; 0x40
 8002b1e:	9b03      	ldr	r3, [sp, #12]
 8002b20:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8002b24:	9901      	ldr	r1, [sp, #4]
 8002b26:	4630      	mov	r0, r6
 8002b28:	f7ff febc 	bl	80028a4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8002b2c:	b958      	cbnz	r0, 8002b46 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8002b2e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db1e      	blt.n	8002b74 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002b36:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8002b3a:	bf14      	ite	ne
 8002b3c:	2101      	movne	r1, #1
 8002b3e:	2100      	moveq	r1, #0
 8002b40:	4630      	mov	r0, r6
 8002b42:	f7ff f97f 	bl	8001e44 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8002b46:	f018 0f1c 	tst.w	r8, #28
 8002b4a:	d073      	beq.n	8002c34 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8002b4c:	b1a0      	cbz	r0, 8002b78 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8002b4e:	2804      	cmp	r0, #4
 8002b50:	d109      	bne.n	8002b66 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002b52:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <f_open+0x220>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2a00      	cmp	r2, #0
 8002b58:	f000 80da 	beq.w	8002d10 <f_open+0x218>
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80d6 	beq.w	8002d10 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002b64:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002b66:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002b6a:	b170      	cbz	r0, 8002b8a <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6023      	str	r3, [r4, #0]
 8002b70:	4607      	mov	r7, r0
 8002b72:	e092      	b.n	8002c9a <f_open+0x1a2>
				res = FR_INVALID_NAME;
 8002b74:	2006      	movs	r0, #6
 8002b76:	e7e6      	b.n	8002b46 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8002b78:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002b7c:	f013 0f11 	tst.w	r3, #17
 8002b80:	d163      	bne.n	8002c4a <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002b82:	f018 0f04 	tst.w	r8, #4
 8002b86:	f040 80bd 	bne.w	8002d04 <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8002b8a:	0728      	lsls	r0, r5, #28
 8002b8c:	d53c      	bpl.n	8002c08 <f_open+0x110>
				dw = GET_FATTIME();
 8002b8e:	f000 fa57 	bl	8003040 <get_fattime>
 8002b92:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8002b94:	4601      	mov	r1, r0
 8002b96:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b98:	300e      	adds	r0, #14
 8002b9a:	f7ff f945 	bl	8001e28 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8002b9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	3016      	adds	r0, #22
 8002ba4:	f7ff f940 	bl	8001e28 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002baa:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8002bae:	2220      	movs	r2, #32
 8002bb0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002bb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002bb6:	f899 0000 	ldrb.w	r0, [r9]
 8002bba:	4651      	mov	r1, sl
 8002bbc:	f7ff fa1b 	bl	8001ff6 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8002bc4:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8002bc6:	4648      	mov	r0, r9
 8002bc8:	f7ff fa23 	bl	8002012 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8002bcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8002bce:	2200      	movs	r2, #0
 8002bd0:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bd2:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8002bd4:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8002bd6:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8002bd8:	9b03      	ldr	r3, [sp, #12]
 8002bda:	2101      	movs	r1, #1
 8002bdc:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8002bde:	f1b8 0f00 	cmp.w	r8, #0
 8002be2:	d011      	beq.n	8002c08 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8002be4:	4641      	mov	r1, r8
 8002be6:	4630      	mov	r0, r6
						dw = fs->winsect;
 8002be8:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8002bec:	f7ff fd78 	bl	80026e0 <remove_chain>
						if (res == FR_OK) {
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d1bb      	bne.n	8002b6c <f_open+0x74>
							res = move_window(fs, dw);
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	9803      	ldr	r0, [sp, #12]
 8002bf8:	f7ff fa8b 	bl	8002112 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8002bfc:	9a03      	ldr	r2, [sp, #12]
 8002bfe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8002c02:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d1b1      	bne.n	8002b6c <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002c08:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002c0a:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8002c10:	bf48      	it	mi
 8002c12:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002c16:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8002c1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c1c:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002c1e:	bf14      	ite	ne
 8002c20:	2101      	movne	r1, #1
 8002c22:	2100      	moveq	r1, #0
 8002c24:	4630      	mov	r0, r6
 8002c26:	f7ff f93b 	bl	8001ea0 <inc_lock>
 8002c2a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d13c      	bne.n	8002caa <f_open+0x1b2>
 8002c30:	2002      	movs	r0, #2
 8002c32:	e79b      	b.n	8002b6c <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d199      	bne.n	8002b6c <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8002c38:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002c3c:	06da      	lsls	r2, r3, #27
 8002c3e:	d463      	bmi.n	8002d08 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8002c40:	f018 0f02 	tst.w	r8, #2
 8002c44:	d0e0      	beq.n	8002c08 <f_open+0x110>
 8002c46:	07db      	lsls	r3, r3, #31
 8002c48:	d5de      	bpl.n	8002c08 <f_open+0x110>
					res = FR_DENIED;
 8002c4a:	2007      	movs	r0, #7
 8002c4c:	e78e      	b.n	8002b6c <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8002c4e:	6820      	ldr	r0, [r4, #0]
 8002c50:	f7ff fc94 	bl	800257c <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8002c54:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8002c56:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8002c58:	d923      	bls.n	8002ca2 <f_open+0x1aa>
 8002c5a:	1c42      	adds	r2, r0, #1
 8002c5c:	4250      	negs	r0, r2
 8002c5e:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002c60:	eba5 0508 	sub.w	r5, r5, r8
 8002c64:	2800      	cmp	r0, #0
 8002c66:	d049      	beq.n	8002cfc <f_open+0x204>
				fp->clust = clst;
 8002c68:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	f47f af7e 	bne.w	8002b6c <f_open+0x74>
 8002c70:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8002c74:	b18b      	cbz	r3, 8002c9a <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8002c76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002c7a:	4640      	mov	r0, r8
 8002c7c:	f7ff f964 	bl	8001f48 <clust2sect>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d0d5      	beq.n	8002c30 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8002c84:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8002c88:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	f898 0001 	ldrb.w	r0, [r8, #1]
 8002c92:	f7ff f897 	bl	8001dc4 <disk_read>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d138      	bne.n	8002d0c <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	b010      	add	sp, #64	; 0x40
 8002c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	e7dc      	b.n	8002c60 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 8002ca6:	2709      	movs	r7, #9
 8002ca8:	e7f7      	b.n	8002c9a <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8002caa:	9e03      	ldr	r6, [sp, #12]
 8002cac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002cb0:	7830      	ldrb	r0, [r6, #0]
 8002cb2:	4641      	mov	r1, r8
 8002cb4:	f7ff f99f 	bl	8001ff6 <ld_clust.isra.1>
 8002cb8:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002cba:	f108 001c 	add.w	r0, r8, #28
 8002cbe:	f7ff f8ab 	bl	8001e18 <ld_dword>
			fp->obj.id = fs->id;
 8002cc2:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8002cc4:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002cc6:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002cc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8002ccc:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8002cce:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8002cd0:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8002cd2:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8002cd4:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8002cd6:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002cd8:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7ff f8aa 	bl	8001e38 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002ce4:	06ab      	lsls	r3, r5, #26
 8002ce6:	d5d8      	bpl.n	8002c9a <f_open+0x1a2>
 8002ce8:	68e5      	ldr	r5, [r4, #12]
 8002cea:	2d00      	cmp	r5, #0
 8002cec:	d0d5      	beq.n	8002c9a <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002cee:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002cf0:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002cf2:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002cf6:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002cf8:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8002cfc:	45a8      	cmp	r8, r5
 8002cfe:	d3a6      	bcc.n	8002c4e <f_open+0x156>
 8002d00:	2000      	movs	r0, #0
 8002d02:	e7b1      	b.n	8002c68 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8002d04:	2008      	movs	r0, #8
 8002d06:	e731      	b.n	8002b6c <f_open+0x74>
					res = FR_NO_FILE;
 8002d08:	2004      	movs	r0, #4
 8002d0a:	e72f      	b.n	8002b6c <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	e72d      	b.n	8002b6c <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002d10:	4630      	mov	r0, r6
 8002d12:	f7ff fe8b 	bl	8002a2c <dir_register>
 8002d16:	e726      	b.n	8002b66 <f_open+0x6e>
 8002d18:	20000030 	.word	0x20000030

08002d1c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8002d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d20:	469b      	mov	fp, r3
 8002d22:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8002d24:	2300      	movs	r3, #0
{
 8002d26:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8002d28:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002d2c:	a903      	add	r1, sp, #12
{
 8002d2e:	4604      	mov	r4, r0
 8002d30:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8002d32:	f7ff f93d 	bl	8001fb0 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002d36:	4606      	mov	r6, r0
 8002d38:	bb58      	cbnz	r0, 8002d92 <f_write+0x76>
 8002d3a:	7d66      	ldrb	r6, [r4, #21]
 8002d3c:	bb4e      	cbnz	r6, 8002d92 <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002d3e:	7d23      	ldrb	r3, [r4, #20]
 8002d40:	079a      	lsls	r2, r3, #30
 8002d42:	f140 80ae 	bpl.w	8002ea2 <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8002d46:	69a3      	ldr	r3, [r4, #24]
 8002d48:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8002d4a:	bf28      	it	cs
 8002d4c:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8002d4e:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 8002d52:	b1d7      	cbz	r7, 8002d8a <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8002d54:	69a1      	ldr	r1, [r4, #24]
 8002d56:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 808f 	bne.w	8002e7e <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	895b      	ldrh	r3, [r3, #10]
 8002d64:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8002d66:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8002d6a:	9301      	str	r3, [sp, #4]
 8002d6c:	d124      	bne.n	8002db8 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8002d6e:	b931      	cbnz	r1, 8002d7e <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8002d70:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8002d72:	b9a0      	cbnz	r0, 8002d9e <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8002d74:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff fc5a 	bl	8002630 <create_chain>
 8002d7c:	e004      	b.n	8002d88 <f_write+0x6c>
					if (fp->cltbl) {
 8002d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d80:	b15b      	cbz	r3, 8002d9a <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8002d82:	4620      	mov	r0, r4
 8002d84:	f7ff f8eb 	bl	8001f5e <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8002d88:	b948      	cbnz	r0, 8002d9e <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8002d8a:	7d23      	ldrb	r3, [r4, #20]
 8002d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d90:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 8002d92:	4630      	mov	r0, r6
 8002d94:	b005      	add	sp, #20
 8002d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8002d9a:	69e1      	ldr	r1, [r4, #28]
 8002d9c:	e7eb      	b.n	8002d76 <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8002d9e:	2801      	cmp	r0, #1
 8002da0:	d102      	bne.n	8002da8 <f_write+0x8c>
 8002da2:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002da4:	7566      	strb	r6, [r4, #21]
 8002da6:	e7f4      	b.n	8002d92 <f_write+0x76>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d101      	bne.n	8002db0 <f_write+0x94>
 8002dac:	2601      	movs	r6, #1
 8002dae:	e7f9      	b.n	8002da4 <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8002db0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8002db2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8002db4:	b903      	cbnz	r3, 8002db8 <f_write+0x9c>
 8002db6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8002db8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da0c      	bge.n	8002dda <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002dc0:	9803      	ldr	r0, [sp, #12]
 8002dc2:	6a22      	ldr	r2, [r4, #32]
 8002dc4:	7840      	ldrb	r0, [r0, #1]
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	4651      	mov	r1, sl
 8002dca:	f7ff f809 	bl	8001de0 <disk_write>
 8002dce:	2800      	cmp	r0, #0
 8002dd0:	d1ec      	bne.n	8002dac <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002dd2:	7d23      	ldrb	r3, [r4, #20]
 8002dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dd8:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002dda:	9b03      	ldr	r3, [sp, #12]
 8002ddc:	69e1      	ldr	r1, [r4, #28]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f8b1 	bl	8001f48 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d0db      	beq.n	8002da2 <f_write+0x86>
			sect += csect;
 8002dea:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8002dec:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 8002dee:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8002df2:	d032      	beq.n	8002e5a <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002df4:	9b00      	ldr	r3, [sp, #0]
 8002df6:	9a01      	ldr	r2, [sp, #4]
 8002df8:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002dfa:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8002dfc:	442a      	add	r2, r5
 8002dfe:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8002e00:	bf88      	it	hi
 8002e02:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002e04:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 8002e06:	bf88      	it	hi
 8002e08:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002e0a:	462b      	mov	r3, r5
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	4649      	mov	r1, r9
 8002e10:	f7fe ffe6 	bl	8001de0 <disk_write>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d1c9      	bne.n	8002dac <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8002e18:	6a21      	ldr	r1, [r4, #32]
 8002e1a:	eba1 0108 	sub.w	r1, r1, r8
 8002e1e:	428d      	cmp	r5, r1
 8002e20:	d90a      	bls.n	8002e38 <f_write+0x11c>
 8002e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e26:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8002e2a:	4650      	mov	r0, sl
 8002e2c:	f7ff f8da 	bl	8001fe4 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8002e30:	7d23      	ldrb	r3, [r4, #20]
 8002e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e36:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8002e38:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8002e3a:	69a3      	ldr	r3, [r4, #24]
 8002e3c:	68e2      	ldr	r2, [r4, #12]
 8002e3e:	442b      	add	r3, r5
 8002e40:	61a3      	str	r3, [r4, #24]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf2c      	ite	cs
 8002e46:	60e2      	strcs	r2, [r4, #12]
 8002e48:	60e3      	strcc	r3, [r4, #12]
 8002e4a:	f8db 3000 	ldr.w	r3, [fp]
 8002e4e:	442b      	add	r3, r5
 8002e50:	44a9      	add	r9, r5
 8002e52:	f8cb 3000 	str.w	r3, [fp]
 8002e56:	1b7f      	subs	r7, r7, r5
 8002e58:	e77b      	b.n	8002d52 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8002e5a:	6a23      	ldr	r3, [r4, #32]
 8002e5c:	4598      	cmp	r8, r3
 8002e5e:	d00c      	beq.n	8002e7a <f_write+0x15e>
 8002e60:	69a2      	ldr	r2, [r4, #24]
 8002e62:	68e3      	ldr	r3, [r4, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8002e68:	9800      	ldr	r0, [sp, #0]
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	4651      	mov	r1, sl
 8002e70:	7840      	ldrb	r0, [r0, #1]
 8002e72:	f7fe ffa7 	bl	8001dc4 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d198      	bne.n	8002dac <f_write+0x90>
			fp->sect = sect;
 8002e7a:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8002e7e:	69a0      	ldr	r0, [r4, #24]
 8002e80:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8002e84:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8002e88:	42bd      	cmp	r5, r7
 8002e8a:	bf28      	it	cs
 8002e8c:	463d      	movcs	r5, r7
 8002e8e:	462a      	mov	r2, r5
 8002e90:	4649      	mov	r1, r9
 8002e92:	4450      	add	r0, sl
 8002e94:	f7ff f8a6 	bl	8001fe4 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8002e98:	7d23      	ldrb	r3, [r4, #20]
 8002e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e9e:	7523      	strb	r3, [r4, #20]
 8002ea0:	e7cb      	b.n	8002e3a <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8002ea2:	2607      	movs	r6, #7
 8002ea4:	e775      	b.n	8002d92 <f_write+0x76>

08002ea6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8002ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002ea8:	a901      	add	r1, sp, #4
{
 8002eaa:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8002eac:	f7ff f880 	bl	8001fb0 <validate>
	if (res == FR_OK) {
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d13a      	bne.n	8002f2c <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002eb6:	7d23      	ldrb	r3, [r4, #20]
 8002eb8:	065a      	lsls	r2, r3, #25
 8002eba:	d537      	bpl.n	8002f2c <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	d50c      	bpl.n	8002eda <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002ec0:	9801      	ldr	r0, [sp, #4]
 8002ec2:	6a22      	ldr	r2, [r4, #32]
 8002ec4:	7840      	ldrb	r0, [r0, #1]
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002ecc:	f7fe ff88 	bl	8001de0 <disk_write>
 8002ed0:	bb78      	cbnz	r0, 8002f32 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002ed2:	7d23      	ldrb	r3, [r4, #20]
 8002ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed8:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002eda:	f000 f8b1 	bl	8003040 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8002ee0:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8002ee2:	9801      	ldr	r0, [sp, #4]
 8002ee4:	f7ff f915 	bl	8002112 <move_window>
				if (res == FR_OK) {
 8002ee8:	4605      	mov	r5, r0
 8002eea:	b9f8      	cbnz	r0, 8002f2c <f_sync+0x86>
					dir = fp->dir_ptr;
 8002eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002eee:	7af3      	ldrb	r3, [r6, #11]
 8002ef0:	f043 0320 	orr.w	r3, r3, #32
 8002ef4:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002ef6:	68a2      	ldr	r2, [r4, #8]
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	4631      	mov	r1, r6
 8002efc:	f7ff f889 	bl	8002012 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8002f00:	68e1      	ldr	r1, [r4, #12]
 8002f02:	f106 001c 	add.w	r0, r6, #28
 8002f06:	f7fe ff8f 	bl	8001e28 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8002f0a:	4639      	mov	r1, r7
 8002f0c:	f106 0016 	add.w	r0, r6, #22
 8002f10:	f7fe ff8a 	bl	8001e28 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8002f14:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8002f16:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8002f18:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8002f1a:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8002f1c:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8002f1e:	f7ff f8ad 	bl	800207c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002f22:	7d23      	ldrb	r3, [r4, #20]
 8002f24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8002f28:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8002f2a:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	b003      	add	sp, #12
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8002f32:	2501      	movs	r5, #1
 8002f34:	e7fa      	b.n	8002f2c <f_sync+0x86>

08002f36 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8002f36:	b513      	push	{r0, r1, r4, lr}
 8002f38:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002f3a:	f7ff ffb4 	bl	8002ea6 <f_sync>
	if (res == FR_OK)
 8002f3e:	b948      	cbnz	r0, 8002f54 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002f40:	a901      	add	r1, sp, #4
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff f834 	bl	8001fb0 <validate>
		if (res == FR_OK) {
 8002f48:	b920      	cbnz	r0, 8002f54 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002f4a:	6920      	ldr	r0, [r4, #16]
 8002f4c:	f7fe ffe4 	bl	8001f18 <dec_lock>
			if (res == FR_OK)
 8002f50:	b900      	cbnz	r0, 8002f54 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8002f52:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8002f54:	b002      	add	sp, #8
 8002f56:	bd10      	pop	{r4, pc}

08002f58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002f58:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <FATFS_LinkDriverEx+0x40>)
 8002f5c:	7a5d      	ldrb	r5, [r3, #9]
 8002f5e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8002f62:	b9b5      	cbnz	r5, 8002f92 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002f64:	7a5d      	ldrb	r5, [r3, #9]
 8002f66:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8002f68:	7a5d      	ldrb	r5, [r3, #9]
 8002f6a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8002f6e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8002f70:	7a58      	ldrb	r0, [r3, #9]
 8002f72:	4418      	add	r0, r3
 8002f74:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8002f76:	7a5a      	ldrb	r2, [r3, #9]
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	1c50      	adds	r0, r2, #1
 8002f7c:	b2c0      	uxtb	r0, r0
 8002f7e:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8002f80:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8002f82:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8002f84:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8002f86:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8002f88:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8002f8a:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8002f8c:	70cc      	strb	r4, [r1, #3]
 8002f8e:	4620      	mov	r0, r4
 8002f90:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8002f92:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8002f94:	bd30      	pop	{r4, r5, pc}
 8002f96:	bf00      	nop
 8002f98:	20000054 	.word	0x20000054

08002f9c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f7ff bfdb 	b.w	8002f58 <FATFS_LinkDriverEx>
	...

08002fa4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8002fa4:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8002fac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8002fb0:	4283      	cmp	r3, r0
 8002fb2:	d102      	bne.n	8002fba <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <BSP_SD_Init+0x1c>)
 8002fb6:	f7fe fba3 	bl	8001700 <HAL_SD_Init>
}
 8002fba:	b003      	add	sp, #12
 8002fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fc0:	200004cc 	.word	0x200004cc

08002fc4 <BSP_SD_ReadBlocks>:
{
 8002fc4:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	460a      	mov	r2, r1
 8002fcc:	4601      	mov	r1, r0
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <BSP_SD_ReadBlocks+0x1c>)
 8002fd0:	f7fe f800 	bl	8000fd4 <HAL_SD_ReadBlocks>
}
 8002fd4:	3000      	adds	r0, #0
 8002fd6:	bf18      	it	ne
 8002fd8:	2001      	movne	r0, #1
 8002fda:	b003      	add	sp, #12
 8002fdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fe0:	200004cc 	.word	0x200004cc

08002fe4 <BSP_SD_WriteBlocks>:
{
 8002fe4:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	460a      	mov	r2, r1
 8002fec:	4601      	mov	r1, r0
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <BSP_SD_WriteBlocks+0x1c>)
 8002ff0:	f7fe f900 	bl	80011f4 <HAL_SD_WriteBlocks>
}
 8002ff4:	3000      	adds	r0, #0
 8002ff6:	bf18      	it	ne
 8002ff8:	2001      	movne	r0, #1
 8002ffa:	b003      	add	sp, #12
 8002ffc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003000:	200004cc 	.word	0x200004cc

08003004 <BSP_SD_GetCardState>:
{
 8003004:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <BSP_SD_GetCardState+0x10>)
 8003008:	f7fe fba7 	bl	800175a <HAL_SD_GetCardState>
}
 800300c:	3804      	subs	r0, #4
 800300e:	bf18      	it	ne
 8003010:	2001      	movne	r0, #1
 8003012:	bd08      	pop	{r3, pc}
 8003014:	200004cc 	.word	0x200004cc

08003018 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003018:	4601      	mov	r1, r0
 800301a:	4801      	ldr	r0, [pc, #4]	; (8003020 <BSP_SD_GetCardInfo+0x8>)
 800301c:	f7fe bb8b 	b.w	8001736 <HAL_SD_GetCardInfo>
 8003020:	200004cc 	.word	0x200004cc

08003024 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8003024:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003026:	4903      	ldr	r1, [pc, #12]	; (8003034 <MX_FATFS_Init+0x10>)
 8003028:	4803      	ldr	r0, [pc, #12]	; (8003038 <MX_FATFS_Init+0x14>)
 800302a:	f7ff ffb7 	bl	8002f9c <FATFS_LinkDriver>
 800302e:	4b03      	ldr	r3, [pc, #12]	; (800303c <MX_FATFS_Init+0x18>)
 8003030:	7018      	strb	r0, [r3, #0]
 8003032:	bd08      	pop	{r3, pc}
 8003034:	20000065 	.word	0x20000065
 8003038:	08003604 	.word	0x08003604
 800303c:	20000064 	.word	0x20000064

08003040 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8003040:	2000      	movs	r0, #0
 8003042:	4770      	bx	lr

08003044 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003048:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304a:	2214      	movs	r2, #20
 800304c:	2100      	movs	r1, #0
 800304e:	a807      	add	r0, sp, #28
 8003050:	f000 fa6e 	bl	8003530 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003054:	2400      	movs	r4, #0
 8003056:	4b37      	ldr	r3, [pc, #220]	; (8003134 <MX_GPIO_Init+0xf0>)
 8003058:	9401      	str	r4, [sp, #4]
 800305a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOK_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led3_Pin|led2_Pin, GPIO_PIN_RESET);
 800305c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003140 <MX_GPIO_Init+0xfc>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 8003060:	4f35      	ldr	r7, [pc, #212]	; (8003138 <MX_GPIO_Init+0xf4>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8003062:	4e36      	ldr	r6, [pc, #216]	; (800313c <MX_GPIO_Init+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003064:	f042 0204 	orr.w	r2, r2, #4
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
 800306a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306c:	f002 0204 	and.w	r2, r2, #4
 8003070:	9201      	str	r2, [sp, #4]
 8003072:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	9402      	str	r4, [sp, #8]
 8003076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
 800307e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003080:	f002 0201 	and.w	r2, r2, #1
 8003084:	9202      	str	r2, [sp, #8]
 8003086:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	9403      	str	r4, [sp, #12]
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	f042 0208 	orr.w	r2, r2, #8
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
 8003092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003094:	f002 0208 	and.w	r2, r2, #8
 8003098:	9203      	str	r2, [sp, #12]
 800309a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800309c:	9404      	str	r4, [sp, #16]
 800309e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80030ac:	9204      	str	r2, [sp, #16]
 80030ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030b0:	9405      	str	r4, [sp, #20]
 80030b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030bc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030c0:	9205      	str	r2, [sp, #20]
 80030c2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030c4:	9406      	str	r4, [sp, #24]
 80030c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, led3_Pin|led2_Pin, GPIO_PIN_RESET);
 80030d6:	4622      	mov	r2, r4
 80030d8:	4640      	mov	r0, r8
 80030da:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030dc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOD, led3_Pin|led2_Pin, GPIO_PIN_RESET);
 80030de:	f7fd fbbd 	bl	800085c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, GPIO_PIN_RESET);
 80030e2:	4622      	mov	r2, r4
 80030e4:	4638      	mov	r0, r7
 80030e6:	2108      	movs	r1, #8
 80030e8:	f7fd fbb8 	bl	800085c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80030ec:	4622      	mov	r2, r4
 80030ee:	4630      	mov	r0, r6
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	f7fd fbb3 	bl	800085c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin;
 80030f8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030fa:	a907      	add	r1, sp, #28
 80030fc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = led3_Pin|led2_Pin;
 80030fe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003100:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003106:	f7fd fabd 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led4_Pin;
 800310a:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(led4_GPIO_Port, &GPIO_InitStruct);
 800310c:	a907      	add	r1, sp, #28
 800310e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = led4_Pin;
 8003110:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003112:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003116:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(led4_GPIO_Port, &GPIO_InitStruct);
 8003118:	f7fd fab4 	bl	8000684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led1_Pin;
 800311c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800311e:	a907      	add	r1, sp, #28
 8003120:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = led1_Pin;
 8003122:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003128:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800312a:	f7fd faab 	bl	8000684 <HAL_GPIO_Init>

}
 800312e:	b00c      	add	sp, #48	; 0x30
 8003130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	40022800 	.word	0x40022800
 800313c:	40021800 	.word	0x40021800
 8003140:	40020c00 	.word	0x40020c00

08003144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003148:	2234      	movs	r2, #52	; 0x34
 800314a:	2100      	movs	r1, #0
 800314c:	a808      	add	r0, sp, #32
 800314e:	f000 f9ef 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003152:	2214      	movs	r2, #20
 8003154:	2100      	movs	r1, #0
 8003156:	a803      	add	r0, sp, #12
 8003158:	f000 f9ea 	bl	8003530 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800315c:	2100      	movs	r1, #0
 800315e:	223c      	movs	r2, #60	; 0x3c
 8003160:	a815      	add	r0, sp, #84	; 0x54
 8003162:	f000 f9e5 	bl	8003530 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2400      	movs	r4, #0
 8003168:	4b20      	ldr	r3, [pc, #128]	; (80031ec <SystemClock_Config+0xa8>)
 800316a:	9401      	str	r4, [sp, #4]
 800316c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003176:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	9301      	str	r3, [sp, #4]
 800317e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003180:	9402      	str	r4, [sp, #8]
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003190:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003196:	9302      	str	r3, [sp, #8]
 8003198:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800319a:	2310      	movs	r3, #16
 800319c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 800319e:	2308      	movs	r3, #8
 80031a0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80031a2:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031a4:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a6:	2601      	movs	r6, #1
  RCC_OscInitStruct.PLL.PLLN = 50;
 80031a8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031aa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80031ac:	2303      	movs	r3, #3
 80031ae:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031b0:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b2:	960b      	str	r6, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031b4:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031b6:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031b8:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ba:	f7fd fd87 	bl	8000ccc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031be:	230f      	movs	r3, #15
 80031c0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031c2:	4631      	mov	r1, r6
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031c8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031ca:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031cc:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031ce:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031d0:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031d2:	f7fd fb7d 	bl	80008d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80031d6:	f44f 73c0 	mov.w	r3, #384	; 0x180
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031da:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80031dc:	9315      	str	r3, [sp, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80031de:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80031e0:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031e2:	f7fd fc11 	bl	8000a08 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80031e6:	b024      	add	sp, #144	; 0x90
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	40007000 	.word	0x40007000

080031f4 <main>:
int main(void){
 80031f4:	b500      	push	{lr}
 80031f6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
	HAL_Init();
 80031fa:	f7fd f9a7 	bl	800054c <HAL_Init>
	SystemClock_Config();
 80031fe:	f7ff ffa1 	bl	8003144 <SystemClock_Config>
	MX_GPIO_Init();
 8003202:	f7ff ff1f 	bl	8003044 <MX_GPIO_Init>
	MX_SDIO_SD_Init();
 8003206:	f000 f8b3 	bl	8003370 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 800320a:	f7ff ff0b 	bl	8003024 <MX_FATFS_Init>
	if(f_mount(&myFATFS, SDPath, 1) == FR_OK){
 800320e:	2201      	movs	r2, #1
 8003210:	491e      	ldr	r1, [pc, #120]	; (800328c <main+0x98>)
 8003212:	a80a      	add	r0, sp, #40	; 0x28
 8003214:	f7ff fc3c 	bl	8002a90 <f_mount>
 8003218:	2800      	cmp	r0, #0
 800321a:	d135      	bne.n	8003288 <main+0x94>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	481c      	ldr	r0, [pc, #112]	; (8003290 <main+0x9c>)
 8003220:	f7fd fb21 	bl	8000866 <HAL_GPIO_TogglePin>
		char myPath[] = "MERVEBERIK.TXT\0";
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <main+0xa0>)
 8003226:	ac06      	add	r4, sp, #24
 8003228:	f103 0510 	add.w	r5, r3, #16
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	6859      	ldr	r1, [r3, #4]
 8003230:	4622      	mov	r2, r4
 8003232:	c203      	stmia	r2!, {r0, r1}
 8003234:	3308      	adds	r3, #8
 8003236:	42ab      	cmp	r3, r5
 8003238:	4614      	mov	r4, r2
 800323a:	d1f7      	bne.n	800322c <main+0x38>
		f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 800323c:	220a      	movs	r2, #10
 800323e:	a906      	add	r1, sp, #24
 8003240:	a896      	add	r0, sp, #600	; 0x258
 8003242:	f7ff fc59 	bl	8002af8 <f_open>
		char myData[] = "Hello World\0";
 8003246:	4b14      	ldr	r3, [pc, #80]	; (8003298 <main+0xa4>)
 8003248:	aa02      	add	r2, sp, #8
 800324a:	f103 0508 	add.w	r5, r3, #8
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
 8003252:	4614      	mov	r4, r2
 8003254:	c403      	stmia	r4!, {r0, r1}
 8003256:	3308      	adds	r3, #8
 8003258:	42ab      	cmp	r3, r5
 800325a:	4622      	mov	r2, r4
 800325c:	d1f7      	bne.n	800324e <main+0x5a>
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	791b      	ldrb	r3, [r3, #4]
 8003262:	6020      	str	r0, [r4, #0]
		f_write(&myFILE, myData, sizeof(myData), &testByte);
 8003264:	a902      	add	r1, sp, #8
 8003266:	220d      	movs	r2, #13
		char myData[] = "Hello World\0";
 8003268:	7123      	strb	r3, [r4, #4]
		f_write(&myFILE, myData, sizeof(myData), &testByte);
 800326a:	a896      	add	r0, sp, #600	; 0x258
 800326c:	ab01      	add	r3, sp, #4
 800326e:	f7ff fd55 	bl	8002d1c <f_write>
		f_close(&myFILE);
 8003272:	a896      	add	r0, sp, #600	; 0x258
 8003274:	f7ff fe5f 	bl	8002f36 <f_close>
		HAL_Delay(1000);
 8003278:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800327c:	f7fd f992 	bl	80005a4 <HAL_Delay>
		HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8003280:	2110      	movs	r1, #16
 8003282:	4806      	ldr	r0, [pc, #24]	; (800329c <main+0xa8>)
 8003284:	f7fd faef 	bl	8000866 <HAL_GPIO_TogglePin>
 8003288:	e7fe      	b.n	8003288 <main+0x94>
 800328a:	bf00      	nop
 800328c:	20000065 	.word	0x20000065
 8003290:	40021800 	.word	0x40021800
 8003294:	08003558 	.word	0x08003558
 8003298:	08003568 	.word	0x08003568
 800329c:	40020c00 	.word	0x40020c00

080032a0 <SD_CheckStatus.isra.0>:
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
 80032a0:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80032a2:	4c06      	ldr	r4, [pc, #24]	; (80032bc <SD_CheckStatus.isra.0+0x1c>)
 80032a4:	2301      	movs	r3, #1
 80032a6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80032a8:	f7ff feac 	bl	8003004 <BSP_SD_GetCardState>
 80032ac:	4623      	mov	r3, r4
 80032ae:	b918      	cbnz	r0, 80032b8 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80032b0:	7822      	ldrb	r2, [r4, #0]
 80032b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032b6:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 80032b8:	7818      	ldrb	r0, [r3, #0]
}
 80032ba:	bd10      	pop	{r4, pc}
 80032bc:	20000008 	.word	0x20000008

080032c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80032c0:	b510      	push	{r4, lr}
Stat = STA_NOINIT;  
 80032c2:	4c05      	ldr	r4, [pc, #20]	; (80032d8 <SD_initialize+0x18>)
 80032c4:	2301      	movs	r3, #1
 80032c6:	7023      	strb	r3, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80032c8:	f7ff fe6c 	bl	8002fa4 <BSP_SD_Init>
 80032cc:	b910      	cbnz	r0, 80032d4 <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 80032ce:	f7ff ffe7 	bl	80032a0 <SD_CheckStatus.isra.0>
 80032d2:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80032d4:	7820      	ldrb	r0, [r4, #0]
}
 80032d6:	bd10      	pop	{r4, pc}
 80032d8:	20000008 	.word	0x20000008

080032dc <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 80032dc:	f7ff bfe0 	b.w	80032a0 <SD_CheckStatus.isra.0>

080032e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80032e0:	b508      	push	{r3, lr}
 80032e2:	4608      	mov	r0, r1
 80032e4:	4611      	mov	r1, r2
 80032e6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ec:	f7ff fe6a 	bl	8002fc4 <BSP_SD_ReadBlocks>
 80032f0:	b920      	cbnz	r0, 80032fc <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80032f2:	f7ff fe87 	bl	8003004 <BSP_SD_GetCardState>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d1fb      	bne.n	80032f2 <SD_read+0x12>
 80032fa:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80032fc:	2001      	movs	r0, #1
}
 80032fe:	bd08      	pop	{r3, pc}

08003300 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8003300:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <SD_ioctl+0x4c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	07db      	lsls	r3, r3, #31
{
 8003308:	b088      	sub	sp, #32
 800330a:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800330c:	d41b      	bmi.n	8003346 <SD_ioctl+0x46>

  switch (cmd)
 800330e:	2903      	cmp	r1, #3
 8003310:	d803      	bhi.n	800331a <SD_ioctl+0x1a>
 8003312:	e8df f001 	tbb	[pc, r1]
 8003316:	0510      	.short	0x0510
 8003318:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800331a:	2004      	movs	r0, #4
  }

  return res;
}
 800331c:	b008      	add	sp, #32
 800331e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003320:	4668      	mov	r0, sp
 8003322:	f7ff fe79 	bl	8003018 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003326:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	e004      	b.n	8003336 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800332c:	4668      	mov	r0, sp
 800332e:	f7ff fe73 	bl	8003018 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003332:	9b07      	ldr	r3, [sp, #28]
 8003334:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8003336:	2000      	movs	r0, #0
 8003338:	e7f0      	b.n	800331c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800333a:	4668      	mov	r0, sp
 800333c:	f7ff fe6c 	bl	8003018 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003340:	9b07      	ldr	r3, [sp, #28]
 8003342:	0a5b      	lsrs	r3, r3, #9
 8003344:	e7f0      	b.n	8003328 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003346:	2003      	movs	r0, #3
 8003348:	e7e8      	b.n	800331c <SD_ioctl+0x1c>
 800334a:	bf00      	nop
 800334c:	20000008 	.word	0x20000008

08003350 <SD_write>:
{
 8003350:	b508      	push	{r3, lr}
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8003358:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800335c:	f7ff fe42 	bl	8002fe4 <BSP_SD_WriteBlocks>
 8003360:	b920      	cbnz	r0, 800336c <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 8003362:	f7ff fe4f 	bl	8003004 <BSP_SD_GetCardState>
 8003366:	2800      	cmp	r0, #0
 8003368:	d1fb      	bne.n	8003362 <SD_write+0x12>
 800336a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800336c:	2001      	movs	r0, #1
}
 800336e:	bd08      	pop	{r3, pc}

08003370 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <MX_SDIO_SD_Init+0x18>)
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <MX_SDIO_SD_Init+0x1c>)
 8003374:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800337a:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800337c:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800337e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003380:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003382:	619a      	str	r2, [r3, #24]
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	200004cc 	.word	0x200004cc
 800338c:	40012c00 	.word	0x40012c00

08003390 <HAL_SD_MspInit>:

}

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	2214      	movs	r2, #20
 8003398:	2100      	movs	r1, #0
 800339a:	a803      	add	r0, sp, #12
 800339c:	f000 f8c8 	bl	8003530 <memset>
  if(sdHandle->Instance==SDIO)
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HAL_SD_MspInit+0x90>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d139      	bne.n	800341c <HAL_SD_MspInit+0x8c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80033a8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80033ac:	2400      	movs	r4, #0
 80033ae:	9400      	str	r4, [sp, #0]
 80033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b2:	481c      	ldr	r0, [pc, #112]	; (8003424 <HAL_SD_MspInit+0x94>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80033b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
 80033ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c4:	9401      	str	r4, [sp, #4]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	f042 0204 	orr.w	r2, r2, #4
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30
 80033ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d0:	f002 0204 	and.w	r2, r2, #4
 80033d4:	9201      	str	r2, [sp, #4]
 80033d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033d8:	9402      	str	r4, [sp, #8]
 80033da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033dc:	f042 0208 	orr.w	r2, r2, #8
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033e8:	250c      	movs	r5, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80033ee:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80033f0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f6:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f8:	eb0d 0105 	add.w	r1, sp, r5
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 80033fc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fe:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003400:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003402:	f7fd f93f 	bl	8000684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003406:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003408:	eb0d 0105 	add.w	r1, sp, r5
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <HAL_SD_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800340e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003412:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003414:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003416:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003418:	f7fd f934 	bl	8000684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 800341c:	b009      	add	sp, #36	; 0x24
 800341e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003420:	40012c00 	.word	0x40012c00
 8003424:	40020800 	.word	0x40020800
 8003428:	40020c00 	.word	0x40020c00

0800342c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800342c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_MspInit+0x34>)
 8003430:	2100      	movs	r1, #0
 8003432:	9100      	str	r1, [sp, #0]
 8003434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800343a:	645a      	str	r2, [r3, #68]	; 0x44
 800343c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003442:	9200      	str	r2, [sp, #0]
 8003444:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	9101      	str	r1, [sp, #4]
 8003448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345a:	b002      	add	sp, #8
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40023800 	.word	0x40023800

08003464 <NMI_Handler>:
 8003464:	4770      	bx	lr

08003466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003466:	e7fe      	b.n	8003466 <HardFault_Handler>

08003468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003468:	e7fe      	b.n	8003468 <MemManage_Handler>

0800346a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800346a:	e7fe      	b.n	800346a <BusFault_Handler>

0800346c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler>

0800346e <SVC_Handler>:
 800346e:	4770      	bx	lr

08003470 <DebugMon_Handler>:
 8003470:	4770      	bx	lr

08003472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003472:	4770      	bx	lr

08003474 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003474:	f7fd b884 	b.w	8000580 <HAL_IncTick>

08003478 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SystemInit+0x18>)
 800347a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800347e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800349a:	e003      	b.n	80034a4 <LoopCopyDataInit>

0800349c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800349e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034a2:	3104      	adds	r1, #4

080034a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034ac:	d3f6      	bcc.n	800349c <CopyDataInit>
  ldr  r2, =_sbss
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034b0:	e002      	b.n	80034b8 <LoopFillZerobss>

080034b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034b4:	f842 3b04 	str.w	r3, [r2], #4

080034b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034b8:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034bc:	d3f9      	bcc.n	80034b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034be:	f7ff ffdb 	bl	8003478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034c2:	f000 f811 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034c6:	f7ff fe95 	bl	80031f4 <main>
  bx  lr    
 80034ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034cc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80034d0:	08003638 	.word	0x08003638
  ldr  r0, =_sdata
 80034d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034d8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80034dc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80034e0:	20000550 	.word	0x20000550

080034e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC_IRQHandler>
	...

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4e0d      	ldr	r6, [pc, #52]	; (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	; (8003524 <__libc_init_array+0x3c>)
 80034ee:	1ba4      	subs	r4, r4, r6
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2500      	movs	r5, #0
 80034f4:	42a5      	cmp	r5, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4e0b      	ldr	r6, [pc, #44]	; (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	; (800352c <__libc_init_array+0x44>)
 80034fc:	f000 f820 	bl	8003540 <_init>
 8003500:	1ba4      	subs	r4, r4, r6
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2500      	movs	r5, #0
 8003506:	42a5      	cmp	r5, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003510:	4798      	blx	r3
 8003512:	3501      	adds	r5, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351a:	4798      	blx	r3
 800351c:	3501      	adds	r5, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003630 	.word	0x08003630
 8003524:	08003630 	.word	0x08003630
 8003528:	08003630 	.word	0x08003630
 800352c:	08003634 	.word	0x08003634

08003530 <memset>:
 8003530:	4402      	add	r2, r0
 8003532:	4603      	mov	r3, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <_init>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr

0800354c <_fini>:
 800354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800354e:	bf00      	nop
 8003550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003552:	bc08      	pop	{r3}
 8003554:	469e      	mov	lr, r3
 8003556:	4770      	bx	lr
